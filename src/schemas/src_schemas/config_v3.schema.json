{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "config",
  "description": "Configuration options for Doc Detective operations.",
  "type": "object",
  "additionalProperties": false,
  "dynamicDefaults": {
    "configId": "uuid"
  },
  "properties": {
    "configId": {
      "description": "Identifier for the configuration.",
      "type": "string"
    },
    "input": {
      "description": "Path(s) to test specifications and documentation source files. May be paths to specific files or to directories to scan for files.",
      "default": ".",
      "anyOf": [
        {
          "$ref": "#/components/schemas/stringOrArray"
        }
      ]
    },
    "output": {
      "description": "Path of the directory in which to store the output of Doc Detective commands. If a file path is specified, Doc Detective attempts to honor the file name specified, but file path behavior is controlled by the configured reporters.",
      "type": "string",
      "default": "."
    },
    "recursive": {
      "description": "If `true` searches `input`, `setup`, and `cleanup` paths recursively for test specifications and source files.",
      "type": "boolean",
      "default": true
    },
    "relativePathBase": {
      "description": "Whether paths should be interpreted as relative to the current working directory (`cwd`) or to the file in which they're specified (`file`).",
      "type": "string",
      "enum": ["cwd", "file"],
      "default": "file"
    },
    "loadVariables": {
      "description": "Path to a `.env` file to load before performing a Doc Detective operation.",
      "type": "string",
      "default": ".env"
    },
    "origin": {
      "description": "Default protocol and domain to use for relative URLs.",
      "type": "string"
    },
    "beforeAny": {
      "description": "Path(s) to test specifications to perform before those specified by `input`. Useful for setting up testing environments.",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "string"
              }
            ]
          }
        }
      ]
    },
    "afterAll": {
      "description": "Path(s) to test specifications to perform after those specified by `input`. Useful for cleaning up testing environments.",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "string"
              }
            ]
          }
        }
      ]
    },
    "detectSteps": {
      "type": "boolean",
      "description": "Whether or not to detect steps in input files based on defined markup.",
      "default": true
    },
    "logLevel": {
      "description": "Amount of detail to output when performing an operation.",
      "type": "string",
      "enum": ["silent", "error", "warning", "info", "debug"],
      "default": "info"
    },
    "runOn": {
      "$ref": "test_v3.schema.json#/properties/runOn"
    },
    "fileTypes": {
      "description": "Configuration for file types and their markup detection.",
      "default": ["markdown", "asciidoc", "html"],
      "anyOf": [
        {
          "type": "array",
          "minItems": 1,
          "items": {
            "anyOf": [
              {
                "$comment": "Simple mode: Reference predefined templates by name.",
                "title": "Predefined",
                "type": "string",
                "enum": ["markdown", "asciidoc", "html"]
              },
              {
                "$comment": "Custom mode: Extend predefined templates or write whole new ones.",
                "title": "Custom",
                "type": "object",
                "required": ["extensions"],
                "properties": {
                  "name": {
                    "description": "Name of the file type.",
                    "type": "string"
                  },
                  "extends": {
                    "$comment": "In development",
                    "description": "Base template to extend.",
                    "type": "string",
                    "enum": ["markdown", "asciidoc", "html"]
                  },
                  "extensions": {
                    "description": "File extensions to use with type.",
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/stringOrArray"
                      }
                    ]
                  },
                  "inlineStatements": {
                    "$ref": "#/components/schemas/inlineStatements"
                  },
                  "markup": {
                    "description": "Markup definitions for the file type.",
                    "type": "array",
                    "minItems": 1,
                    "items": { "$ref": "#/components/schemas/markupDefinition" }
                  }
                }
              },
              {
                "title": "Executable",
                "$comment": "Executable mode: Convert executable inputs directly into tests.",
                "type": "object",
                "required": ["extensions"],
                "properties": {
                  "extensions": {
                    "description": "File extensions to use with type.",
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/stringOrArray"
                      }
                    ]
                  },
                  "runShell": {
                    "description": "`runShell` step to perform for this file type. Use $1 as a placeholder for the file path.",
                    "anyOf": [
                      {
                        "$ref": "runShell_v3.schema.json#"
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "integrations": {
      "description": "Options for connecting to external services.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "openApi": {
          "$ref": "test_v3.schema.json#/properties/openApi"
        }
      }
    },
    "telemetry": {
      "description": "Options around sending telemetry for Doc Detective usage.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "send": {
          "description": "If `true`, sends Doc Detective telemetry.",
          "type": "boolean",
          "default": true
        },
        "userId": {
          "description": "Identifier for the organization, group, or individual running Doc Detective.",
          "type": "string"
        }
      },
      "required": ["send"],
      "default": {
        "send": true
      }
    }
  },
  "components": {
    "schemas": {
      "markupDefinition": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the markup definition",
            "type": "string"
          },
          "regex": {
            "description": "Regular expressions to match the markup type.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/stringOrArray"
              }
            ]
          },
          "batchMatches": {
            "description": "If `true`, all matches are combined into a single string.",
            "type": "boolean",
            "default": false
          },
          "actions": {
            "description": "Actions to perform when the markup type is detected.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/markupActionString"
              },
              {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/markupActionString"
                    },
                    { "$ref": "step_v3.schema.json#" }
                  ]
                }
              }
            ]
          }
        }
      },
      "markupActionString": {
        "type": "string",
        "enum": [
          "checkLink",
          "click",
          "find",
          "goTo",
          "httpRequest",
          "loadVariables",
          "record",
          "runCode",
          "runShell",
          "screenshot",
          "stopRecord",
          "type",
          "wait"
        ]
      },
      "inlineStatements": {
        "description": "Statements to include tests and steps inside the content of the file, such as within Markdown.",
        "type": "object",
        "properties": {
          "testStart": {
            "description": "Regular expressions that indicate the start of a test. If capture groups are used, the first capture group is used for the statement. If no capture groups are used, the entire match is used for the statement.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/stringOrArray"
              }
            ]
          },
          "testEnd": {
            "description": "Regular expressions that indicate that the current test is complete.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/stringOrArray"
              }
            ]
          },
          "ignoreStart": {
            "description": "Regular expressions that indicates that the following content should be ignored for testing purposes.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/stringOrArray"
              }
            ]
          },
          "ignoreEnd": {
            "description": "Regular expressions that indicate that the ignored section of content is complete.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/stringOrArray"
              }
            ]
          },
          "step": {
            "description": "Regular expressions that indicate a step in a test.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/stringOrArray"
              }
            ]
          }
        }
      },
      "stringOrArray": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          }
        ]
      }
    }
  },
  "examples": [
    {},
    {
      "input": ".",
      "output": ".",
      "recursive": true,
      "loadVariables": ".env",
      "fileTypes": ["markdown"]
    },
    {
      "fileTypes": [
        {
          "extends": "markdown",
          "extensions": ["md", "markdown", "mdx"],
          "inlineStatements": {
            "testStart": "<!--\\s*testStart\\s*(.*?)\\s*-->",
            "testEnd": "<!-- testEnd -->",
            "ignoreStart": "<!-- ignoreStart -->",
            "ignoreEnd": "<!-- ignoreEnd -->",
            "step": "<!--\\s*step\\s*(.*?)\\s*-->"
          },
          "markup": [
            {
              "name": "onscreenText",
              "regex": "\\*\\*.+?\\*\\*",
              "actions": "find"
            }
          ]
        }
      ]
    },
    {
      "fileTypes": [
        {
          "name": "Jupyter Notebooks",
          "extensions": "ipynb",
          "runShell": {
            "command": "jupyter",
            "args": [
              "nbconvert",
              "--to",
              "script",
              "--execute",
              "$1",
              "--stdout"
            ]
          }
        },
        {
          "name": "JavaScript",
          "extensions": "js",
          "runShell": {
            "command": "node $1"
          }
        },
        {
          "name": "Python",
          "extensions": "py",
          "runShell": {
            "command": "python $1"
          }
        }
      ]
    }
  ]
}
