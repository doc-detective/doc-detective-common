{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "specification",
  "type": "object",
  "dynamicDefaults": {
    "specId": "uuid"
  },
  "properties": {
    "specId": {
      "type": "string",
      "description": "Unique identifier for the test specification."
    },
    "description": {
      "type": "string",
      "description": "Description of the test specification."
    },
    "contentPath": {
      "type": "string",
      "description": "Path to the content that the specification is associated with."
    },
    "runOn": {
      "$ref": "test_v3.schema.json#/properties/runOn"
    },
    "openApi": {
      "$ref": "test_v3.schema.json#/properties/openApi"
    },
    "tests": {
      "description": "[Tests](test) to perform.",
      "type": "array",
      "minItems": 1,
      "items": {
        "anyOf": [{ "$ref": "test_v3.schema.json#" }]
      }
    }
  },
  "required": ["tests"],
  "examples": [
    {
      "tests": [
        {
          "steps": [
            {
              "checkLink": {
                "url": "https://www.duckduckgo.com"
              }
            }
          ]
        }
      ]
    },
    {
      "specId": "Do all the things! - Spec",
      "runOn": [
        {
          "platforms": ["windows", "mac"],
          "browsers": {
            "name": "firefox",
            "executablePath": "/usr/bin/firefox",
            "dimensions": {},
            "viewport": {}
          }
        }
      ],
      "tests": [
        {
          "testId": "Do all the things! - Test",
          "description": "This test includes nearly every property across all actions.",
          "runOn": [
            {
              "platforms": "linux",
              "browsers": "firefox"
            }
          ],
          "steps": [
            {
              "loadVariables": ".env"
            },
            {
              "runShell": {
                "command": "echo",
                "args": ["$USER"],
                "maxVariation": 0,
                "overwrite": "aboveVariation"
              },
              "variables": {}
            },
            {
              "checkLink": {
                "url": "https://www.duckduckgo.com"
              }
            },
            {
              "httpRequest": {
                "method": "post",
                "url": "https://reqres.in/api/users",
                "request": {
                  "body": {
                    "name": "morpheus",
                    "job": "leader"
                  }
                },
                "response": {
                  "body": {
                    "name": "morpheus",
                    "job": "leader"
                  }
                },
                "statusCodes": [200, 201],
                "maxVariation": 0,
                "overwrite": "aboveVariation"
              },
              "variables": {}
            },
            {
              "goTo": {
                "url": "https://www.duckduckgo.com"
              }
            },
            {
              "find": {
                "selector": "[title=Search]",
                "elementText": "Search",
                "timeout": 10000,
                "moveTo": true,
                "click": true,
                "type": {
                  "keys": ["shorthair cat"]
                }
              },
              "variables": {}
            },
            {
              "type": {
                "keys": ["$ENTER$"]
              }
            },
            {
              "screenshot": {
                "maxVariation": 0,
                "overwrite": "aboveVariation"
              }
            }
          ],
          "detectSteps": true
        }
      ]
    },
    {
      "specId": "Make a request from an OpenAPI definition",
      "openApi": [
        {
          "descriptionPath": "https://www.acme.com/openapi.json",
          "server": "https://api.acme.com",
          "descriptionName": "Acme"
        }
      ],
      "tests": [
        {
          "steps": [
            {
              "httpRequest": {
                "openApi": {
                  "operationId": "getUserById",
                  "validateAgainstSchema": "both",
                  "useExample": "none",
                  "exampleKey": ""
                },
                "request": {
                  "params": {
                    "id": 123
                  }
                },
                "response": {},
                "maxVariation": 0,
                "overwrite": "aboveVariation"
              },
              "variables": {}
            }
          ]
        }
      ]
    }
  ]
}
