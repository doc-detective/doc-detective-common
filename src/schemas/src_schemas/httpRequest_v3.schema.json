{
  "title": "httpRequest",
  "description": "Perform a generic HTTP request, for example to an API.",
  "anyOf": [
    {
      "$ref": "#/components/schemas/url"
    },
    {
      "$ref": "#/components/schemas/object"
    }
  ],
  "components": {
    "schemas": {
      "url": {
        "title": "URL",
        "type": "string",
        "description": "URL for the HTTP request.",
        "pattern": "(^(http://|https://).*|\\$[A-Za-z0-9_]+)",
        "transform": ["trim"]
      },
      "object": {
        "type": "object",
        "anyOf": [
          {
            "required": ["url"]
          },
          {
            "required": ["openApi"]
          }
        ],
        "additionalProperties": false,
        "properties": {
          "url": {
            "$ref": "#/components/schemas/url"
          },
          "openApi": {
            "anyOf": [
              {
                "allOf": [
                  {
                    "$ref": "openApi_v3.schema.json#/components/schemas/operationId"
                  },
                  {
                    "title": "Operation ID",
                    "description": "Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "openApi_v3.schema.json#"
                  },
                  {
                    "type": "object",
                    "required": ["operationId"]
                  }
                ]
              }
            ]
          },
          "statusCodes": {
            "description": "Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                }
              ]
            },
            "default": [200]
          },
          "method": {
            "type": "string",
            "description": "Method of the HTTP request",
            "enum": ["get", "put", "post", "patch", "delete"],
            "transform": ["trim", "toEnumCase"],
            "default": "get"
          },
          "timeout": {
            "type": "integer",
            "description": "Timeout for the HTTP request, in milliseconds.",
            "default": 60000
          },
          "request": {
            "type": "object",
            "properties": {
              "headers": {
                "description": "Headers to include in the HTTP request, in key/value format.",
                "type": "object",
                "additionalProperties": true,
                "properties": {},
                "default": {}
              },
              "params": {
                "description": "URL parameters to include in the HTTP request, in key/value format.",
                "type": "object",
                "additionalProperties": true,
                "default": {},
                "properties": {}
              },
              "data": {
                "description": "JSON object to include as the body of the HTTP request.",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {}
                  },
                  {
                    "type": "string"
                  }
                ],
                "default": {}
              }
            }
          },
          "response": {
            "type": "object",
            "properties": {
              "headers": {
                "description": "Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren't present in the response, the step fails.",
                "type": "object",
                "additionalProperties": true,
                "properties": {},
                "default": {}
              },
              "data": {
                "description": "JSON object expected in the response. If one or more key/value pairs aren't present in the response, the step fails.",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {}
                  },
                  {
                    "type": "string"
                  }
                ],
                "default": {}
              }
            }
          },
          "allowAdditionalFields": {
            "type": "boolean",
            "description": "If `false`, the step fails when the response data contains fields not specified in thr response body.",
            "default": true
          },
          "path": {
            "type": "string",
            "description": "File path to save the command's output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."
          },
          "directory": {
            "type": "string",
            "description": "Directory to save the command's output. If the directory doesn't exist, creates the directory. If not specified, the directory is your media directory."
          },
          "maxVariation": {
            "type": "number",
            "description": "Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn't exist at `path`, this value is ignored.",
            "default": 0,
            "minimum": 0,
            "maximum": 1
          },
          "overwrite": {
            "type": "string",
            "description": "If `true`, overwrites the existing output at `path` if it exists.\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.",
            "enum": ["true", "false", "aboveVariation"],
            "default": "false"
          }
        }
      }
    }
  },
  "examples": [
    "https://reqres.in/api/users",
    {
      "url": "https://reqres.in/api/users"
    },
    {
      "url": "https://reqres.in/api/users/2",
      "method": "put",
      "request": {
        "body": {
          "name": "morpheus",
          "job": "zion resident"
        }
      }
    },
    {
      "url": "https://reqres.in/api/users",
      "method": "post",
      "request": {
        "body": {
          "name": "morpheus",
          "job": "leader"
        }
      },
      "response": {
        "body": {
          "name": "morpheus",
          "job": "leader"
        }
      },
      "statusCodes": [200, 201]
    },
    {
      "url": "https://www.api-server.com",
      "method": "post",
      "timeout": 30000,
      "request": {
        "body": {
          "field": "value"
        },
        "headers": {
          "header": "value"
        },
        "params": {
          "param": "value"
        }
      },
      "response": {
        "body": {
          "field": "value"
        },
        "headers": {
          "header": "value"
        }
      },
      "statusCodes": [200]
    },
    {
      "url": "https://reqres.in/api/users",
      "method": "post",
      "request": {
        "body": {
          "name": "morpheus",
          "job": "leader"
        }
      },
      "response": {
        "body": {
          "name": "morpheus",
          "job": "leader"
        }
      },
      "statusCodes": [200, 201],
      "path": "response.json",
      "directory": "media",
      "maxVariation": 0.05,
      "overwrite": "aboveVariation"
    },
    {
      "openApi": "getUserById"
    },
    {
      "openApi": {
        "descriptionName": "Reqres",
        "operationId": "getUserById"
      },
      "request": {
        "params": {
          "id": 123
        }
      }
    },
    {
      "openApi": {
        "descriptionPath": "https://api.example.com/openapi.json",
        "operationId": "getUserById"
      },
      "request": {
        "params": {
          "id": 123
        }
      }
    },
    {
      "openApi": {
        "descriptionPath": "https://api.example.com/openapi.json",
        "operationId": "createUser",
        "useExample": "both"
      }
    },
    {
      "openApi": {
        "descriptionPath": "https://api.example.com/openapi.json",
        "operationId": "updateUser",
        "useExample": "request",
        "exampleKey": "acme"
      }
    },
    {
      "openApi": {
        "descriptionPath": "https://api.example.com/openapi.json",
        "operationId": "updateUser",
        "useExample": "request",
        "exampleKey": "acme",
        "headers": {
          "Authorization": "Bearer $TOKEN"
        }
      }
    }
  ]
}
