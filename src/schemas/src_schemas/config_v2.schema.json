{
  "title": "config",
  "description": "Configuration options for Doc Detective operations.",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "defaultCommand": {
      "description": "Default command to run when no command is specified.",
      "type": "string",
      "enum": ["runTests", "runCoverage"]
    },
    "input": {
      "default": ".",
      "$ref": "#/definitions/input"
    },
    "output": {
      "default": ".",
      "$ref": "#/definitions/output"
    },
    "recursive": {
      "default": true,
      "$ref": "#/definitions/recursive"
    },
    "envVariables": {
      "description": "Path to a `.env` file to load before performing a Doc Detective operation.",
      "type": "string"
    },
    "runTests": {
      "type": "object",
      "additionalProperties": false,
      "description": "Options for running tests. When running tests, values set here override general configuration options.",
      "properties": {
        "input": {
          "$ref": "#/definitions/input"
        },
        "output": {
          "$ref": "#/definitions/output"
        },
        "setup": {
          "description": "Path(s) to test specifications to perform before those specified by `input`. Useful for setting up testing environments.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  }
                ]
              }
            }
          ]
        },
        "cleanup": {
          "description": "Path(s) to test specifications to perform after those specified by `input`. Useful for cleaning up testing environments.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  }
                ]
              }
            }
          ]
        },
        "recursive": {
          "$ref": "#/definitions/recursive"
        },
        "detectSteps": {
          "type": "boolean",
          "description": "Whether or not to detect steps in input files based on markup regex.",
          "default": false
        },
        "mediaDirectory": {
          "description": "Path of the directory in which to store output media files.",
          "type": "string",
          "default": "."
        },
        "downloadDirectory": {
          "description": "Path of the directory in which to store downloaded files.",
          "type": "string",
          "default": "."
        },
        "contexts": {
          "type": "array",
          "description": "Application/platform sets to run tests in. If no contexts are specified but a context is required by one or more tests, Doc Detective attempts to identify a supported context in the current environment and run tests against it. See [context](/reference/schemas/context).",
          "items": {
            "oneOf": [
              {
                "$ref": "context_v2.schema.json#"
              }
            ]
          },
          "default": [
            {
              "app": {
                "name": "firefox",
                "options": {
                  "width": 1200,
                  "height": 800,
                  "headless": true
                }
              },
              "platforms": ["linux", "mac", "windows"]
            }
          ]
        }
      }
    },
    "runCoverage": {
      "description": "Options for performing test coverage analysis on documentation source files.  When performing coveration analysis, values set here override general configuration options.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "input": {
          "$ref": "#/definitions/input"
        },
        "output": {
          "$ref": "#/definitions/output"
        },
        "recursive": {
          "$ref": "#/definitions/recursive"
        },
        "markup": {
          "$ref": "#/definitions/markupToInclude",
          "default": [
            "onscreenText",
            "emphasis",
            "image",
            "hyperlink",
            "codeInline",
            "codeBlock",
            "interaction"
          ]
        }
      }
    },
    "suggestTests": {
      "description": "Options for suggesting tests based on documentation source files.  When suggesting tests, values set here override general condiguration options.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "input": {
          "$ref": "#/definitions/input"
        },
        "output": {
          "$ref": "#/definitions/output"
        },
        "recursive": {
          "$ref": "#/definitions/recursive"
        },
        "markup": {
          "$ref": "#/definitions/markupToInclude",
          "default": [
            "onscreenText",
            "emphasis",
            "image",
            "hyperlink",
            "codeInline",
            "codeBlock",
            "interaction"
          ]
        }
      }
    },
    "fileTypes": {
      "description": "Information on supported file types and how to parse the markup within them.",
      "type": "array",
      "items": {
        "oneOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "description": "Name of the file type.",
                "type": "string"
              },
              "extensions": {
                "description": "File extensions to support with this configuration.",
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    }
                  ]
                }
              },
              "testStartStatementOpen": {
                "description": "Opening of an in-document test start statement.",
                "type": "string"
              },
              "testStartStatementClose": {
                "description": "Close of an in-document test start statement.",
                "type": "string"
              },
              "testIgnoreStatement": {
                "description": "Text for an in-document test ignore statement.",
                "type": "string"
              },
              "testEndStatement": {
                "description": "Text for an in-document test end statement.",
                "type": "string"
              },
              "stepStatementOpen": {
                "description": "Opening of an in-document step statement.",
                "type": "string"
              },
              "stepStatementClose": {
                "description": "Close of an in-document step statement.",
                "type": "string"
              },
              "markup": {
                "description": "Markup types and associated regex patterns to find in documentation source files.",
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "name": {
                          "description": "Name of the markup type.",
                          "type": "string"
                        },
                        "regex": {
                          "description": "Regex patterns to find the markup type in documentation source files.",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "oneOf": [
                              {
                                "type": "string"
                              }
                            ]
                          }
                        },
                        "actions": {
                          "description": "Actions that apply to the markup type.",
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "checkLink",
                                  "find",
                                  "goTo",
                                  "httpRequest",
                                  "runShell",
                                  "saveScreenshot",
                                  "setVariables",
                                  "typeKeys",
                                  "wait"
                                ]
                              },
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "name": {
                                    "description": "Name of the action.",
                                    "type": "string",
                                    "enum": [
                                      "checkLink",
                                      "find",
                                      "goTo",
                                      "httpRequest",
                                      "runShell",
                                      "saveScreenshot",
                                      "setVariables",
                                      "typeKeys",
                                      "wait"
                                    ]
                                  },
                                  "params": {
                                    "description": "Parameters for the action.",
                                    "type": "object",
                                    "additionalProperties": true
                                  }
                                },
                                "required": ["name"]
                              }
                            ]
                          }
                        }
                      },
                      "required": ["name", "regex"]
                    }
                  ]
                }
              }
            },
            "required": [
              "extensions",
              "testStartStatementOpen",
              "testStartStatementClose",
              "testIgnoreStatement",
              "testEndStatement",
              "stepStatementOpen",
              "stepStatementClose",
              "markup"
            ]
          }
        ]
      },
      "default": [
        {
          "name": "Markdown",
          "extensions": [".md", ".markdown", ".mdx"],
          "testStartStatementOpen": "[comment]: # (test start",
          "testStartStatementClose": ")",
          "testIgnoreStatement": "[comment]: # (test ignore)",
          "testEndStatement": "[comment]: # (test end)",
          "stepStatementOpen": "[comment]: # (step",
          "stepStatementClose": ")",
          "markup": [
            {
              "name": "onscreenText",
              "regex": ["\\*\\*.+?\\*\\*"],
              "actions": ["find"]
            },
            {
              "name": "emphasis",
              "regex": ["(?<!\\*)\\*(?!\\*).+?(?<!\\*)\\*(?!\\*)"],
              "actions": ["find"]
            },
            {
              "name": "image",
              "regex": ["!\\[.+?\\]\\(.+?\\)"],
              "actions": ["checkLink"]
            },
            {
              "name": "hyperlink",
              "regex": ["(?<!!)\\[.+?\\]\\(.+?\\)"],
              "actions": ["checkLink", "goTo", "httpRequest"]
            },
            {
              "name": "orderedList",
              "regex": ["(?<=\n) *?[0-9][0-9]?[0-9]?.\\s*.*"]
            },
            {
              "name": "unorderedList",
              "regex": ["(?<=\n) *?\\*.\\s*.*", "(?<=\n) *?-.\\s*.*"]
            },
            {
              "name": "codeInline",
              "regex": ["(?<!`)`(?!`).+?(?<!`)`(?!`)"],
              "actions": ["runShell", "setVariables", "httpRequest"]
            },
            {
              "name": "codeBlock",
              "regex": ["(?=(```))(\\w|\\W)*(?<=```)"],
              "actions": ["runShell", "setVariables", "httpRequest"]
            },
            {
              "name": "interaction",
              "regex": [
                "[cC]lick",
                "[tT]ap",
                "[tT]ouch",
                "[sS]elect",
                "[cC]hoose",
                "[tT]oggle",
                "[eE]nable",
                "[dD]isable",
                "[tT]urn [oO][ff|n]",
                "[tT]ype",
                "[eE]nter",
                "[sS]end",
                "[aA]dd",
                "[rR]emove",
                "[dD]elete",
                "[uU]pload",
                "[dD]ownload",
                "[sS]croll",
                "[sS]earch",
                "[fF]ilter",
                "[sS]ort",
                "[cC]opy",
                "[pP]aste",
                "[cC]ut",
                "[rR]eplace",
                "[cC]lear",
                "[rR]efresh",
                "[rR]evert",
                "[rR]estore",
                "[rR]eset",
                "[lL]ogin",
                "[lL]ogout",
                "[sS]ign [iI]n",
                "[sS]ign [oO]ut",
                "[sS]ubmit",
                "[cC]ancel",
                "[cC]lose",
                "[aA]ccept",
                "[dD]ecline",
                "[dD]eny",
                "[rR]eject",
                "[rR]etry",
                "[rR]estart",
                "[rR]esume"
              ],
              "actions": [
                "checkLink",
                "find",
                "goTo",
                "httpRequest",
                "runShell",
                "saveScreenshot",
                "setVariables",
                "typeKeys",
                "wait"
              ]
            }
          ]
        },
        {
          "name": "AsciiDoc",
          "extensions": [".adoc", ".asciidoc, .asc"],
          "testStartStatementOpen": "// (test start",
          "testStartStatementClose": ")",
          "testIgnoreStatement": "// (test ignore)",
          "testEndStatement": "// (test end)",
          "stepStatementOpen": "// (step",
          "stepStatementClose": ")",
          "markup": []
        },
        {
          "name": "HTML/XML",
          "extensions": [".html", ".htm", ".xml", ".xhtml"],
          "testStartStatementOpen": "<!-- test start",
          "testStartStatementClose": "-->",
          "testIgnoreStatement": "<!-- test ignore -->",
          "testEndStatement": "<!-- test end -->",
          "stepStatementOpen": "<!-- step",
          "stepStatementClose": "-->",
          "markup": []
        }
      ]
    },
    "integrations": {
      "description": "Options for connecting to external services.",
      "type": "object",
      "additionalProperties": false,
      "properties": {}
    },
    "telemetry": {
      "description": "Options around sending telemetry for Doc Detective usage.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "send": {
          "description": "If `true`, sends Doc Detective telemetry.",
          "type": "boolean",
          "default": true
        },
        "userId": {
          "description": "Identifier for the organization, group, or individual running Doc Detective.",
          "type": "string"
        }
      },
      "required": ["send"],
      "default": {
        "send": true
      }
    },
    "logLevel": {
      "description": "Amount of detail to output when performing an operation.",
      "type": "string",
      "enum": ["silent", "error", "warning", "info", "debug"],
      "default": "info"
    }
  },
  "definitions": {
    "input": {
      "description": "Path(s) to test specifications and documentation source files. May be paths to specific files or to directories to scan for files.",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "string"
              }
            ]
          }
        }
      ]
    },
    "recursive": {
      "description": "If `true` searches `input`, `setup`, and `cleanup` paths recursively for test specificaions and source files.",
      "type": "boolean"
    },
    "output": {
      "description": "Path of the directory in which to store the output of Doc Detective commands.",
      "type": "string",
      "default": "."
    },
    "markupToInclude": {
      "description": "Markup types to include when performing this operation. If no markup types are specified, the operation includes all markup types as defined in `fileTypes`.",
      "type": "array",
      "items": {
        "oneOf": [
          {
            "type": "string"
          }
        ]
      }
    }
  },
  "examples": [
    {},
    {
      "input": ".",
      "output": "."
    },
    {
      "defaultCommand": "runTests",
      "envVariables": "",
      "input": ".",
      "output": ".",
      "recursive": true,
      "logLevel": "info",
      "runTests": {
        "input": ".",
        "output": ".",
        "setup": "",
        "cleanup": "",
        "recursive": true,
        "mediaDirectory": ".",
        "downloadDirectory": ".",
        "contexts": [
          {
            "app": {
              "name": "firefox",
              "path": ""
            },
            "platforms": ["linux", "mac", "windows"]
          }
        ]
      }
    },
    {
      "envVariables": "",
      "input": ".",
      "output": ".",
      "recursive": true,
      "logLevel": "info",
      "runTests": {
        "input": ".",
        "output": ".",
        "setup": "",
        "cleanup": "",
        "recursive": true,
        "mediaDirectory": ".",
        "downloadDirectory": ".",
        "contexts": [
          {
            "app": {
              "name": "firefox",
              "path": ""
            },
            "platforms": ["linux", "mac", "windows"]
          }
        ]
      },
      "runCoverage": {
        "recursive": true,
        "input": ".",
        "output": ".",
        "markup": []
      },
      "fileTypes": [
        {
          "name": "Markdown",
          "extensions": [".md", ".mdx"],
          "testStartStatementOpen": "[comment]: # (test start",
          "testStartStatementClose": ")",
          "testIgnoreStatement": "[comment]: # (test ignore)",
          "testEndStatement": "[comment]: # (test end)",
          "stepStatementOpen": "[comment]: # (step",
          "stepStatementClose": ")",
          "markup": [
            {
              "name": "onscreenText",
              "regex": ["\\*\\*.+?\\*\\*"],
              "actions": [
                {
                  "name": "find",
                  "params": {
                    "moveTo": true,
                    "click": true
                  }
                }
              ]
            },
            {
              "name": "emphasis",
              "regex": ["(?<!\\*)\\*(?!\\*).+?(?<!\\*)\\*(?!\\*)"],
              "actions": ["find"]
            },
            {
              "name": "image",
              "regex": ["!\\[.+?\\]\\(.+?\\)"],
              "actions": ["checkLink"]
            },
            {
              "name": "hyperlink",
              "regex": ["(?<!!)\\[.+?\\]\\(.+?\\)"],
              "actions": ["checkLink", "goTo", "httpRequest"]
            },
            {
              "name": "orderedList",
              "regex": ["(?<=\n) *?[0-9][0-9]?[0-9]?.\\s*.*"]
            },
            {
              "name": "unorderedList",
              "regex": ["(?<=\n) *?\\*.\\s*.*", "(?<=\n) *?-.\\s*.*"]
            },
            {
              "name": "codeInline",
              "regex": ["(?<!`)`(?!`).+?(?<!`)`(?!`)"],
              "actions": ["runShell", "setVariables", "httpRequest"]
            },
            {
              "name": "codeBlock",
              "regex": ["(?=(```))(\\w|\\W)*(?<=```)"],
              "actions": ["runShell", "setVariables", "httpRequest"]
            },
            {
              "name": "interaction",
              "regex": [
                "[cC]lick",
                "[tT]ap",
                "[tT]ouch",
                "[sS]elect",
                "[cC]hoose",
                "[tT]oggle",
                "[eE]nable",
                "[dD]isable",
                "[tT]urn [oO][ff|n]",
                "[tT]ype",
                "[eE]nter",
                "[sS]end",
                "[aA]dd",
                "[rR]emove",
                "[dD]elete",
                "[uU]pload",
                "[dD]ownload",
                "[sS]croll",
                "[sS]earch",
                "[fF]ilter",
                "[sS]ort",
                "[cC]opy",
                "[pP]aste",
                "[cC]ut",
                "[rR]eplace",
                "[cC]lear",
                "[rR]efresh",
                "[rR]evert",
                "[rR]estore",
                "[rR]eset",
                "[lL]ogin",
                "[lL]ogout",
                "[sS]ign [iI]n",
                "[sS]ign [oO]ut",
                "[sS]ubmit",
                "[cC]ancel",
                "[cC]lose",
                "[aA]ccept",
                "[dD]ecline",
                "[dD]eny",
                "[rR]eject",
                "[rR]etry",
                "[rR]estart",
                "[rR]esume"
              ],
              "actions": [
                "checkLink",
                "find",
                "goTo",
                "httpRequest",
                "runShell",
                "saveScreenshot",
                "setVariables",
                "typeKeys",
                "wait"
              ]
            }
          ]
        }
      ],
      "integrations": {},
      "telemetry": {
        "send": false,
        "userId": "Doc Detective"
      }
    },
    {
      "envVariables": "",
      "input": ["."],
      "output": ".",
      "recursive": true,
      "logLevel": "info",
      "runTests": {
        "input": ["."],
        "output": ".",
        "setup": ["."],
        "cleanup": ["."],
        "recursive": true,
        "mediaDirectory": ".",
        "downloadDirectory": ".",
        "contexts": [
          {
            "app": {
              "name": "firefox",
              "options": {
                "width": 1200,
                "height": 800,
                "headless": true
              }
            },
            "platforms": ["linux", "mac", "windows"]
          }
        ]
      },
      "runCoverage": {
        "recursive": true,
        "input": ["."],
        "output": ".",
        "markup": []
      },
      "fileTypes": [
        {
          "name": "Markdown",
          "extensions": [".md", ".mdx"],
          "testStartStatementOpen": "[comment]: # (test start",
          "testStartStatementClose": ")",
          "testIgnoreStatement": "[comment]: # (test ignore)",
          "testEndStatement": "[comment]: # (test end)",
          "stepStatementOpen": "[comment]: # (step",
          "stepStatementClose": ")",
          "markup": [
            {
              "name": "onscreenText",
              "regex": ["\\*\\*.+?\\*\\*"],
              "actions": ["find"]
            },
            {
              "name": "emphasis",
              "regex": ["(?<!\\*)\\*(?!\\*).+?(?<!\\*)\\*(?!\\*)"],
              "actions": ["find"]
            },
            {
              "name": "image",
              "regex": ["!\\[.+?\\]\\(.+?\\)"],
              "actions": ["checkLink"]
            },
            {
              "name": "hyperlink",
              "regex": ["(?<!!)\\[.+?\\]\\(.+?\\)"],
              "actions": ["checkLink", "goTo", "httpRequest"]
            },
            {
              "name": "orderedList",
              "regex": ["(?<=\n) *?[0-9][0-9]?[0-9]?.\\s*.*"]
            },
            {
              "name": "unorderedList",
              "regex": ["(?<=\n) *?\\*.\\s*.*", "(?<=\n) *?-.\\s*.*"]
            },
            {
              "name": "codeInline",
              "regex": ["(?<!`)`(?!`).+?(?<!`)`(?!`)"],
              "actions": ["runShell", "setVariables", "httpRequest"]
            },
            {
              "name": "codeBlock",
              "regex": ["(?=(```))(\\w|\\W)*(?<=```)"],
              "actions": ["runShell", "setVariables", "httpRequest"]
            },
            {
              "name": "interaction",
              "regex": [
                "[cC]lick",
                "[tT]ap",
                "[tT]ouch",
                "[sS]elect",
                "[cC]hoose",
                "[tT]oggle",
                "[eE]nable",
                "[dD]isable",
                "[tT]urn [oO][ff|n]",
                "[tT]ype",
                "[eE]nter",
                "[sS]end",
                "[aA]dd",
                "[rR]emove",
                "[dD]elete",
                "[uU]pload",
                "[dD]ownload",
                "[sS]croll",
                "[sS]earch",
                "[fF]ilter",
                "[sS]ort",
                "[cC]opy",
                "[pP]aste",
                "[cC]ut",
                "[rR]eplace",
                "[cC]lear",
                "[rR]efresh",
                "[rR]evert",
                "[rR]estore",
                "[rR]eset",
                "[lL]ogin",
                "[lL]ogout",
                "[sS]ign [iI]n",
                "[sS]ign [oO]ut",
                "[sS]ubmit",
                "[cC]ancel",
                "[cC]lose",
                "[aA]ccept",
                "[dD]ecline",
                "[dD]eny",
                "[rR]eject",
                "[rR]etry",
                "[rR]estart",
                "[rR]esume"
              ],
              "actions": [
                "checkLink",
                "find",
                "goTo",
                "httpRequest",
                "runShell",
                "saveScreenshot",
                "setVariables",
                "typeKeys",
                "wait"
              ]
            }
          ]
        }
      ],
      "integrations": {},
      "telemetry": {
        "send": false,
        "userId": "Doc Detective"
      }
    }
  ]
}
