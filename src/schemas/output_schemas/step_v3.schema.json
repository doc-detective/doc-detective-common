{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "step",
  "description": "A step in a test.",
  "type": "object",
  "dynamicDefaults": {
    "stepId": "uuid"
  },
  "properties": {
    "stepId": {
      "type": "string",
      "description": "ID of the step."
    },
    "description": {
      "type": "string",
      "description": "Description of the step."
    },
    "outputs": {
      "type": "object",
      "description": "Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.",
      "default": {},
      "patternProperties": {
        "^[A-Za-z0-9_]+$": {
          "type": "string",
          "description": "Runtime expression for a user-defined output value."
        }
      }
    },
    "variables": {
      "type": "object",
      "description": "Environment variables to set from user-defined expressions.",
      "default": {},
      "patternProperties": {
        "^[A-Za-z0-9_]+$": {
          "type": "string",
          "description": "Runtime expression for a user-defined output value."
        }
      }
    }
  },
  "anyOf": [
    {
      "properties": {
        "checkLink": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "checkLink",
          "anyOf": [
            {
              "description": "Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.",
              "type": "string",
              "pattern": "(^(http://|https://|/).*|\\$[A-Za-z0-9_]+)",
              "transform": [
                "trim"
              ]
            },
            {
              "description": "Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "url"
              ],
              "properties": {
                "url": {
                  "type": "string",
                  "description": "URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.",
                  "pattern": "(^(http://|https://|/).*|\\$[A-Za-z0-9_]+)",
                  "transform": [
                    "trim"
                  ]
                },
                "origin": {
                  "type": "string",
                  "description": "Protocol and domain to navigate to. Prepended to `url`.",
                  "transform": [
                    "trim"
                  ]
                },
                "statusCodes": {
                  "description": "Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "integer"
                      }
                    ]
                  },
                  "default": [
                    200,
                    201,
                    202
                  ]
                }
              }
            }
          ],
          "components": {
            "schemas": {
              "string": {
                "description": "Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.",
                "type": "string",
                "pattern": "(^(http://|https://|/).*|\\$[A-Za-z0-9_]+)",
                "transform": [
                  "trim"
                ]
              },
              "object": {
                "description": "Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "url"
                ],
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.",
                    "pattern": "(^(http://|https://|/).*|\\$[A-Za-z0-9_]+)",
                    "transform": [
                      "trim"
                    ]
                  },
                  "origin": {
                    "type": "string",
                    "description": "Protocol and domain to navigate to. Prepended to `url`.",
                    "transform": [
                      "trim"
                    ]
                  },
                  "statusCodes": {
                    "description": "Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.",
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "integer"
                        }
                      ]
                    },
                    "default": [
                      200,
                      201,
                      202
                    ]
                  }
                }
              }
            }
          },
          "examples": [
            "https://www.google.com",
            "/search",
            {
              "url": "https://www.google.com",
              "statusCodes": [
                200
              ]
            },
            {
              "url": "/search",
              "origin": "www.google.com",
              "statusCodes": [
                200
              ]
            }
          ]
        }
      },
      "required": [
        "checkLink"
      ]
    },
    {
      "properties": {
        "goTo": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "checkLink",
          "anyOf": [
            {
              "description": "Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.",
              "type": "string",
              "pattern": "(^(http://|https://|/).*|\\$[A-Za-z0-9_]+)",
              "transform": [
                "trim"
              ]
            },
            {
              "description": "Navigate to an HTTP or HTTPS URL.",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "url"
              ],
              "properties": {
                "url": {
                  "type": "string",
                  "description": "URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn't specified, attempts to navigate relative to the current URL, if any.",
                  "pattern": "(^(http://|https://|/).*|\\$[A-Za-z0-9_]+)",
                  "transform": [
                    "trim"
                  ]
                },
                "origin": {
                  "type": "string",
                  "description": "Protocol and domain to navigate to. Prepended to `url`.",
                  "transform": [
                    "trim"
                  ]
                }
              }
            }
          ],
          "components": {
            "schemas": {
              "string": {
                "description": "Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.",
                "type": "string",
                "pattern": "(^(http://|https://|/).*|\\$[A-Za-z0-9_]+)",
                "transform": [
                  "trim"
                ]
              },
              "object": {
                "description": "Navigate to an HTTP or HTTPS URL.",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "url"
                ],
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn't specified, attempts to navigate relative to the current URL, if any.",
                    "pattern": "(^(http://|https://|/).*|\\$[A-Za-z0-9_]+)",
                    "transform": [
                      "trim"
                    ]
                  },
                  "origin": {
                    "type": "string",
                    "description": "Protocol and domain to navigate to. Prepended to `url`.",
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          },
          "examples": [
            "https://www.google.com",
            "/search",
            {
              "url": "https://www.google.com"
            },
            {
              "url": "/search",
              "origin": "www.google.com"
            }
          ]
        }
      },
      "required": [
        "goTo"
      ]
    },
    {
      "properties": {
        "runShell": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "runShell",
          "description": "Perform a native shell command.",
          "anyOf": [
            {
              "type": "string",
              "transform": [
                "trim"
              ]
            },
            {
              "type": "object",
              "required": [
                "command"
              ],
              "additionalProperties": false,
              "properties": {
                "command": {
                  "type": "string",
                  "description": "Command to perform in the machine's default shell."
                },
                "args": {
                  "type": "array",
                  "description": "Arguments for the command.",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "default": []
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working directory for the command.",
                  "default": "."
                },
                "exitCodes": {
                  "type": "array",
                  "description": "Expected exit codes of the command. If the command's actual exit code isn't in this list, the step fails.",
                  "items": {
                    "oneOf": [
                      {
                        "type": "integer"
                      }
                    ]
                  },
                  "default": [
                    0
                  ]
                },
                "stdio": {
                  "type": "string",
                  "description": "Content expected in the command's stdout or stderr. If the expected content can't be found in the command's stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."
                },
                "path": {
                  "type": "string",
                  "description": "File path to save the command's output, relative to `directory`."
                },
                "directory": {
                  "type": "string",
                  "description": "Directory to save the command's output. If the directory doesn't exist, creates the directory. If not specified, the directory is your media directory."
                },
                "maxVariation": {
                  "type": "integer",
                  "description": "Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn't exist at `path`, this value is ignored.",
                  "default": 0,
                  "minimum": 0,
                  "maximum": 100
                },
                "overwrite": {
                  "type": "string",
                  "description": "If `true`, overwrites the existing output at `path` if it exists.\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.",
                  "enum": [
                    "true",
                    "false",
                    "aboveVariation"
                  ],
                  "default": "false"
                },
                "timeout": {
                  "type": "integer",
                  "description": "Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.",
                  "default": 60000
                }
              }
            }
          ],
          "components": {
            "schemas": {
              "string": {
                "type": "string",
                "transform": [
                  "trim"
                ]
              },
              "object": {
                "type": "object",
                "required": [
                  "command"
                ],
                "additionalProperties": false,
                "properties": {
                  "command": {
                    "type": "string",
                    "description": "Command to perform in the machine's default shell."
                  },
                  "args": {
                    "type": "array",
                    "description": "Arguments for the command.",
                    "items": {
                      "oneOf": [
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "default": []
                  },
                  "workingDirectory": {
                    "type": "string",
                    "description": "Working directory for the command.",
                    "default": "."
                  },
                  "exitCodes": {
                    "type": "array",
                    "description": "Expected exit codes of the command. If the command's actual exit code isn't in this list, the step fails.",
                    "items": {
                      "oneOf": [
                        {
                          "type": "integer"
                        }
                      ]
                    },
                    "default": [
                      0
                    ]
                  },
                  "stdio": {
                    "type": "string",
                    "description": "Content expected in the command's stdout or stderr. If the expected content can't be found in the command's stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."
                  },
                  "path": {
                    "type": "string",
                    "description": "File path to save the command's output, relative to `directory`."
                  },
                  "directory": {
                    "type": "string",
                    "description": "Directory to save the command's output. If the directory doesn't exist, creates the directory. If not specified, the directory is your media directory."
                  },
                  "maxVariation": {
                    "type": "integer",
                    "description": "Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn't exist at `path`, this value is ignored.",
                    "default": 0,
                    "minimum": 0,
                    "maximum": 100
                  },
                  "overwrite": {
                    "type": "string",
                    "description": "If `true`, overwrites the existing output at `path` if it exists.\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.",
                    "enum": [
                      "true",
                      "false",
                      "aboveVariation"
                    ],
                    "default": "false"
                  },
                  "timeout": {
                    "type": "integer",
                    "description": "Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.",
                    "default": 60000
                  }
                }
              }
            }
          },
          "examples": [
            "docker run hello-world",
            {
              "command": "echo",
              "args": [
                "$USER"
              ]
            },
            {
              "command": "echo",
              "args": [
                "hello-world"
              ],
              "id": "ddec5e20-2e81-4f38-867c-92c8d9516755",
              "description": "This is a test!"
            },
            {
              "command": "docker run hello-world",
              "timeout": 20000,
              "exitCodes": [
                0
              ],
              "output": "Hello from Docker!"
            },
            {
              "command": "false",
              "exitCodes": [
                1
              ]
            },
            {
              "command": "echo",
              "args": [
                "setup"
              ],
              "exitCodes": [
                0
              ],
              "output": "/.*?/"
            },
            {
              "command": "docker run hello-world",
              "workingDirectory": ".",
              "exitCodes": [
                0
              ],
              "output": "Hello from Docker!",
              "path": "docker-output.txt",
              "saveDirectory": "output",
              "maxVariation": 10,
              "overwrite": "aboveVariation"
            }
          ]
        }
      },
      "required": [
        "runShell"
      ]
    },
    {
      "properties": {
        "runCode": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "runCode",
          "description": "Assemble and run code.",
          "anyOf": [
            {
              "type": "object",
              "required": [
                "code",
                "language"
              ],
              "properties": {
                "language": {
                  "type": "string",
                  "description": "Language of the code to run. If not specified, the code is run in the shell.",
                  "enum": [
                    "python",
                    "bash",
                    "javascript"
                  ]
                },
                "code": {
                  "description": "Code to run.",
                  "type": "string"
                },
                "args": {
                  "type": "array",
                  "description": "Arguments for the command.",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "default": []
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working directory for the command.",
                  "default": "."
                },
                "exitCodes": {
                  "type": "array",
                  "description": "Expected exit codes of the command. If the command's actual exit code isn't in this list, the step fails.",
                  "items": {
                    "oneOf": [
                      {
                        "type": "integer"
                      }
                    ]
                  },
                  "default": [
                    0
                  ]
                },
                "stdio": {
                  "type": "string",
                  "description": "Content expected in the command's output. If the expected content can't be found in the command's output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."
                },
                "path": {
                  "type": "string",
                  "description": "File path to save the command's output, relative to `directory`."
                },
                "directory": {
                  "type": "string",
                  "description": "Directory to save the command's output. If the directory doesn't exist, creates the directory. If not specified, the directory is your media directory."
                },
                "maxVariation": {
                  "type": "integer",
                  "description": "Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn't exist at `path`, this value is ignored.",
                  "default": 0,
                  "minimum": 0,
                  "maximum": 100
                },
                "overwrite": {
                  "type": "string",
                  "description": "If `true`, overwrites the existing output at `path` if it exists.\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.",
                  "enum": [
                    "true",
                    "false",
                    "aboveVariation"
                  ],
                  "default": "false"
                },
                "timeout": {
                  "type": "integer",
                  "description": "Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.",
                  "default": 60000
                }
              }
            }
          ],
          "components": {
            "schemas": {
              "object": {
                "type": "object",
                "required": [
                  "code",
                  "language"
                ],
                "properties": {
                  "language": {
                    "type": "string",
                    "description": "Language of the code to run. If not specified, the code is run in the shell.",
                    "enum": [
                      "python",
                      "bash",
                      "javascript"
                    ]
                  },
                  "code": {
                    "description": "Code to run.",
                    "type": "string"
                  },
                  "args": {
                    "type": "array",
                    "description": "Arguments for the command.",
                    "items": {
                      "oneOf": [
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "default": []
                  },
                  "workingDirectory": {
                    "type": "string",
                    "description": "Working directory for the command.",
                    "default": "."
                  },
                  "exitCodes": {
                    "type": "array",
                    "description": "Expected exit codes of the command. If the command's actual exit code isn't in this list, the step fails.",
                    "items": {
                      "oneOf": [
                        {
                          "type": "integer"
                        }
                      ]
                    },
                    "default": [
                      0
                    ]
                  },
                  "stdio": {
                    "type": "string",
                    "description": "Content expected in the command's output. If the expected content can't be found in the command's output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."
                  },
                  "path": {
                    "type": "string",
                    "description": "File path to save the command's output, relative to `directory`."
                  },
                  "directory": {
                    "type": "string",
                    "description": "Directory to save the command's output. If the directory doesn't exist, creates the directory. If not specified, the directory is your media directory."
                  },
                  "maxVariation": {
                    "type": "integer",
                    "description": "Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn't exist at `path`, this value is ignored.",
                    "default": 0,
                    "minimum": 0,
                    "maximum": 100
                  },
                  "overwrite": {
                    "type": "string",
                    "description": "If `true`, overwrites the existing output at `path` if it exists.\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.",
                    "enum": [
                      "true",
                      "false",
                      "aboveVariation"
                    ],
                    "default": "false"
                  },
                  "timeout": {
                    "type": "integer",
                    "description": "Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.",
                    "default": 60000
                  }
                }
              }
            }
          },
          "examples": [
            {
              "language": "javascript",
              "code": "console.log('Hello, ${process.env.USER}!');"
            },
            {
              "language": "bash",
              "code": "docker run hello-world",
              "timeout": 20000,
              "exitCodes": [
                0
              ],
              "output": "Hello from Docker!"
            },
            {
              "language": "javascript",
              "code": "return false",
              "exitCodes": [
                1
              ]
            },
            {
              "language": "python",
              "code": "print('Hello from Python')",
              "workingDirectory": ".",
              "exitCodes": [
                0
              ],
              "output": "Hello from Python!",
              "path": "python-output.txt",
              "directory": "output",
              "maxVariation": 10,
              "overwrite": "aboveVariation"
            }
          ]
        }
      },
      "required": [
        "runCode"
      ]
    },
    {
      "properties": {
        "type": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "typeKeys",
          "description": "Type keys. To type special keys, begin and end the string with `$` and use the special key's keyword. For example, to type the Escape key, enter `$ESCAPE$`.",
          "anyOf": [
            {
              "description": "Sequence of keys to enter.",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              ]
            },
            {
              "type": "object",
              "properties": {
                "keys": {
                  "description": "Sequence of keys to enter.",
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string"
                          }
                        ]
                      }
                    }
                  ]
                },
                "inputDelay": {
                  "type": "number",
                  "description": "Delay in milliseconds between each key press. If not specified during a recording, defaults to `100`."
                },
                "selector": {
                  "type": "string",
                  "description": "Selector for the element to type into. If not specified, the typing occurs in the active element."
                }
              },
              "required": [
                "keys"
              ],
              "additionalProperties": false
            }
          ],
          "components": {
            "schemas": {
              "keys": {
                "description": "Sequence of keys to enter.",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "string"
                        }
                      ]
                    }
                  }
                ]
              },
              "object": {
                "type": "object",
                "properties": {
                  "keys": {
                    "description": "Sequence of keys to enter.",
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "array",
                        "items": {
                          "oneOf": [
                            {
                              "type": "string"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "inputDelay": {
                    "type": "number",
                    "description": "Delay in milliseconds between each key press. If not specified during a recording, defaults to `100`."
                  },
                  "selector": {
                    "type": "string",
                    "description": "Selector for the element to type into. If not specified, the typing occurs in the active element."
                  }
                },
                "required": [
                  "keys"
                ],
                "additionalProperties": false
              }
            }
          },
          "examples": [
            "kittens",
            [
              "$ENTER$"
            ],
            [
              "kittens",
              "$ENTER$"
            ],
            {
              "keys": "kittens"
            },
            {
              "keys": [
                "$ENTER$"
              ]
            },
            {
              "keys": [
                "kittens",
                "$ENTER$"
              ],
              "inputDelay": 500
            }
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    {
      "properties": {
        "stopRecord": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "stopRecord",
          "description": "Stop the current recording.",
          "anyOf": [
            {
              "type": "boolean",
              "nullable": true
            }
          ],
          "examples": [
            true
          ]
        }
      },
      "required": [
        "stopRecord"
      ]
    },
    {
      "properties": {
        "wait": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "wait",
          "description": "Pause (in milliseconds) before performing the next action.",
          "default": 5000,
          "anyOf": [
            {
              "type": "number",
              "nullable": true
            },
            {
              "type": "string",
              "pattern": "(\\$[A-Za-z0-9_]+)",
              "transform": [
                "trim"
              ]
            },
            {
              "type": "boolean"
            }
          ],
          "components": {
            "schemas": {
              "string": {
                "type": "string",
                "pattern": "(\\$[A-Za-z0-9_]+)",
                "transform": [
                  "trim"
                ]
              }
            }
          },
          "examples": [
            5000,
            "$WAIT_DURATION",
            true
          ]
        }
      },
      "required": [
        "wait"
      ]
    }
  ],
  "examples": [
    {
      "checkLink": "https://www.google.com"
    },
    {
      "stepId": "path-only",
      "checkLink": "/search"
    },
    {
      "stepId": "status-code",
      "checkLink": {
        "url": "https://www.google.com",
        "statusCodes": [
          200
        ]
      }
    },
    {
      "goTo": {
        "url": "https://www.google.com"
      }
    },
    {
      "goTo": "https://www.google.com"
    },
    {
      "wait": 5000
    },
    {
      "runCode": {
        "language": "python",
        "code": "print('Hello from Python')",
        "workingDirectory": ".",
        "exitCodes": [
          0
        ],
        "output": "Hello from Python!",
        "path": "python-output.txt",
        "directory": "output",
        "maxVariation": 10,
        "overwrite": "aboveVariation"
      }
    }
  ]
}