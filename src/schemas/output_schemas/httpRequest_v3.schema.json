{
  "title": "httpRequest",
  "description": "Perform a generic HTTP request, for example to an API.",
  "anyOf": [
    {
      "title": "URL",
      "type": "string",
      "description": "URL for the HTTP request.",
      "pattern": "(^(http://|https://).*|\\$[A-Za-z0-9_]+)",
      "transform": [
        "trim"
      ]
    },
    {
      "type": "object",
      "anyOf": [
        {
          "required": [
            "url"
          ]
        },
        {
          "required": [
            "openApi"
          ]
        }
      ],
      "additionalProperties": false,
      "properties": {
        "url": {
          "title": "URL",
          "type": "string",
          "description": "URL for the HTTP request.",
          "pattern": "(^(http://|https://).*|\\$[A-Za-z0-9_]+)",
          "transform": [
            "trim"
          ]
        },
        "openApi": {
          "anyOf": [
            {
              "allOf": [
                {
                  "type": "string",
                  "description": "ID of the operation to use for the request."
                },
                {
                  "title": "Operation ID",
                  "description": "Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."
                }
              ]
            },
            {
              "allOf": [
                {
                  "version": "1.0.0",
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "openApi",
                  "type": "object",
                  "description": "OpenAPI description and configuration.",
                  "additionalProperties": false,
                  "properties": {
                    "descriptionName": {
                      "type": "string",
                      "description": "Name of the OpenAPI description, as defined in your configuration."
                    },
                    "descriptionPath": {
                      "type": "string",
                      "description": "URL or local path to the OpenAPI description."
                    },
                    "operationId": {
                      "type": "string",
                      "description": "ID of the operation to use for the request."
                    },
                    "server": {
                      "type": "string",
                      "description": "Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."
                    },
                    "validateAgainstSchema": {
                      "type": "string",
                      "description": "Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn't match the schema, the step fails.",
                      "enum": [
                        "request",
                        "response",
                        "both",
                        "none"
                      ],
                      "default": "both"
                    },
                    "mockResponse": {
                      "type": "boolean",
                      "description": "If `true`, doesn't make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn't fully implemented yet. If `statusCode` isn't specified, uses the first defined response code."
                    },
                    "statusCode": {
                      "type": "integer",
                      "description": "Response code to use for validation, examples, and status code checking. If the response code doesn't match, the step fails. `statusCodes` overrides this value when specified."
                    },
                    "useExample": {
                      "type": [
                        "string"
                      ],
                      "description": "Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn't specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.",
                      "enum": [
                        "request",
                        "response",
                        "both",
                        "none"
                      ],
                      "default": "none"
                    },
                    "exampleKey": {
                      "type": "string",
                      "description": "Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn't specified or isn't available for a given parameter or object, the `example` property value is used.",
                      "default": ""
                    },
                    "headers": {
                      "type": "object",
                      "description": "Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "components": {
                    "schemas": {
                      "operationId": {
                        "type": "string",
                        "description": "ID of the operation to use for the request."
                      },
                      "descriptionPath": {
                        "type": "string",
                        "description": "URL or local path to the OpenAPI description."
                      }
                    }
                  },
                  "examples": [
                    {
                      "descriptionPath": "https://petstore.swagger.io/v2/swagger.json"
                    },
                    {
                      "descriptionName": "Reqres",
                      "operationId": "getUserById"
                    },
                    {
                      "descriptionPath": "https://api.example.com/openapi.json",
                      "operationId": "getUserById"
                    },
                    {
                      "descriptionPath": "https://api.example.com/openapi.json",
                      "operationId": "createUser",
                      "useExample": "both"
                    },
                    {
                      "descriptionPath": "https://api.example.com/openapi.json",
                      "operationId": "createUser",
                      "useExample": "both",
                      "exampleKey": "example1"
                    },
                    {
                      "descriptionPath": "https://api.example.com/openapi.json",
                      "operationId": "createUser",
                      "useExample": "both",
                      "exampleKey": "example1",
                      "statusCode": 201
                    },
                    {
                      "descriptionPath": "https://api.example.com/openapi.json",
                      "operationId": "createUser",
                      "useExample": "both",
                      "exampleKey": "example1",
                      "statusCode": 201,
                      "validateAgainstSchema": "none"
                    },
                    {
                      "descriptionPath": "https://api.example.com/openapi.json",
                      "operationId": "createUser",
                      "useExample": "both",
                      "exampleKey": "example1",
                      "statusCode": 201,
                      "validateAgainstSchema": "none",
                      "mockResponse": true
                    },
                    {
                      "descriptionPath": "https://api.example.com/openapi.json",
                      "operationId": "createUser",
                      "useExample": "both",
                      "exampleKey": "example1",
                      "statusCode": 201,
                      "validateAgainstSchema": "none",
                      "mockResponse": true,
                      "headers": {
                        "Authorization": "Bearer 12345"
                      }
                    }
                  ]
                },
                {
                  "required": [
                    "operationId"
                  ]
                }
              ]
            }
          ]
        },
        "statusCodes": {
          "description": "Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "integer"
              }
            ]
          },
          "default": [
            200
          ]
        },
        "method": {
          "type": "string",
          "description": "Method of the HTTP request",
          "enum": [
            "get",
            "put",
            "post",
            "patch",
            "delete"
          ],
          "transform": [
            "trim",
            "toEnumCase"
          ],
          "default": "get"
        },
        "timeout": {
          "type": "integer",
          "description": "Timeout for the HTTP request, in milliseconds.",
          "default": 60000
        },
        "request": {
          "type": "object",
          "properties": {
            "headers": {
              "description": "Headers to include in the HTTP request, in key/value format.",
              "type": "object",
              "additionalProperties": true,
              "properties": {},
              "default": {}
            },
            "params": {
              "description": "URL parameters to include in the HTTP request, in key/value format.",
              "type": "object",
              "additionalProperties": true,
              "default": {},
              "properties": {}
            },
            "data": {
              "description": "JSON object to include as the body of the HTTP request.",
              "anyOf": [
                {
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {}
                },
                {
                  "type": "string"
                }
              ],
              "default": {}
            }
          }
        },
        "response": {
          "type": "object",
          "properties": {
            "headers": {
              "description": "Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren't present in the response, the step fails.",
              "type": "object",
              "additionalProperties": true,
              "properties": {},
              "default": {}
            },
            "data": {
              "description": "JSON object expected in the response. If one or more key/value pairs aren't present in the response, the step fails.",
              "anyOf": [
                {
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {}
                },
                {
                  "type": "string"
                }
              ],
              "default": {}
            }
          }
        },
        "allowAdditionalFields": {
          "type": "boolean",
          "description": "If `false`, the step fails when the response data contains fields not specified in thr response body.",
          "default": true
        },
        "path": {
          "type": "string",
          "description": "File path to save the command's output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."
        },
        "directory": {
          "type": "string",
          "description": "Directory to save the command's output. If the directory doesn't exist, creates the directory. If not specified, the directory is your media directory."
        },
        "maxVariation": {
          "type": "number",
          "description": "Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn't exist at `path`, this value is ignored.",
          "default": 0,
          "minimum": 0,
          "maximum": 1
        },
        "overwrite": {
          "type": "string",
          "description": "If `true`, overwrites the existing output at `path` if it exists.\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.",
          "enum": [
            "true",
            "false",
            "aboveVariation"
          ],
          "default": "false"
        }
      }
    }
  ],
  "components": {
    "schemas": {
      "url": {
        "title": "URL",
        "type": "string",
        "description": "URL for the HTTP request.",
        "pattern": "(^(http://|https://).*|\\$[A-Za-z0-9_]+)",
        "transform": [
          "trim"
        ]
      },
      "object": {
        "type": "object",
        "anyOf": [
          {
            "required": [
              "url"
            ]
          },
          {
            "required": [
              "openApi"
            ]
          }
        ],
        "additionalProperties": false,
        "properties": {
          "url": {
            "title": "URL",
            "type": "string",
            "description": "URL for the HTTP request.",
            "pattern": "(^(http://|https://).*|\\$[A-Za-z0-9_]+)",
            "transform": [
              "trim"
            ]
          },
          "openApi": {
            "anyOf": [
              {
                "allOf": [
                  {
                    "type": "string",
                    "description": "ID of the operation to use for the request."
                  },
                  {
                    "title": "Operation ID",
                    "description": "Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "version": "1.0.0",
                    "$schema": "http://json-schema.org/draft-07/schema#",
                    "title": "openApi",
                    "type": "object",
                    "description": "OpenAPI description and configuration.",
                    "additionalProperties": false,
                    "properties": {
                      "descriptionName": {
                        "type": "string",
                        "description": "Name of the OpenAPI description, as defined in your configuration."
                      },
                      "descriptionPath": {
                        "type": "string",
                        "description": "URL or local path to the OpenAPI description."
                      },
                      "operationId": {
                        "type": "string",
                        "description": "ID of the operation to use for the request."
                      },
                      "server": {
                        "type": "string",
                        "description": "Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."
                      },
                      "validateAgainstSchema": {
                        "type": "string",
                        "description": "Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn't match the schema, the step fails.",
                        "enum": [
                          "request",
                          "response",
                          "both",
                          "none"
                        ],
                        "default": "both"
                      },
                      "mockResponse": {
                        "type": "boolean",
                        "description": "If `true`, doesn't make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn't fully implemented yet. If `statusCode` isn't specified, uses the first defined response code."
                      },
                      "statusCode": {
                        "type": "integer",
                        "description": "Response code to use for validation, examples, and status code checking. If the response code doesn't match, the step fails. `statusCodes` overrides this value when specified."
                      },
                      "useExample": {
                        "type": [
                          "string"
                        ],
                        "description": "Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn't specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.",
                        "enum": [
                          "request",
                          "response",
                          "both",
                          "none"
                        ],
                        "default": "none"
                      },
                      "exampleKey": {
                        "type": "string",
                        "description": "Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn't specified or isn't available for a given parameter or object, the `example` property value is used.",
                        "default": ""
                      },
                      "headers": {
                        "type": "object",
                        "description": "Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "components": {
                      "schemas": {
                        "operationId": {
                          "type": "string",
                          "description": "ID of the operation to use for the request."
                        },
                        "descriptionPath": {
                          "type": "string",
                          "description": "URL or local path to the OpenAPI description."
                        }
                      }
                    },
                    "examples": [
                      {
                        "descriptionPath": "https://petstore.swagger.io/v2/swagger.json"
                      },
                      {
                        "descriptionName": "Reqres",
                        "operationId": "getUserById"
                      },
                      {
                        "descriptionPath": "https://api.example.com/openapi.json",
                        "operationId": "getUserById"
                      },
                      {
                        "descriptionPath": "https://api.example.com/openapi.json",
                        "operationId": "createUser",
                        "useExample": "both"
                      },
                      {
                        "descriptionPath": "https://api.example.com/openapi.json",
                        "operationId": "createUser",
                        "useExample": "both",
                        "exampleKey": "example1"
                      },
                      {
                        "descriptionPath": "https://api.example.com/openapi.json",
                        "operationId": "createUser",
                        "useExample": "both",
                        "exampleKey": "example1",
                        "statusCode": 201
                      },
                      {
                        "descriptionPath": "https://api.example.com/openapi.json",
                        "operationId": "createUser",
                        "useExample": "both",
                        "exampleKey": "example1",
                        "statusCode": 201,
                        "validateAgainstSchema": "none"
                      },
                      {
                        "descriptionPath": "https://api.example.com/openapi.json",
                        "operationId": "createUser",
                        "useExample": "both",
                        "exampleKey": "example1",
                        "statusCode": 201,
                        "validateAgainstSchema": "none",
                        "mockResponse": true
                      },
                      {
                        "descriptionPath": "https://api.example.com/openapi.json",
                        "operationId": "createUser",
                        "useExample": "both",
                        "exampleKey": "example1",
                        "statusCode": 201,
                        "validateAgainstSchema": "none",
                        "mockResponse": true,
                        "headers": {
                          "Authorization": "Bearer 12345"
                        }
                      }
                    ]
                  },
                  {
                    "required": [
                      "operationId"
                    ]
                  }
                ]
              }
            ]
          },
          "statusCodes": {
            "description": "Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                }
              ]
            },
            "default": [
              200
            ]
          },
          "method": {
            "type": "string",
            "description": "Method of the HTTP request",
            "enum": [
              "get",
              "put",
              "post",
              "patch",
              "delete"
            ],
            "transform": [
              "trim",
              "toEnumCase"
            ],
            "default": "get"
          },
          "timeout": {
            "type": "integer",
            "description": "Timeout for the HTTP request, in milliseconds.",
            "default": 60000
          },
          "request": {
            "type": "object",
            "properties": {
              "headers": {
                "description": "Headers to include in the HTTP request, in key/value format.",
                "type": "object",
                "additionalProperties": true,
                "properties": {},
                "default": {}
              },
              "params": {
                "description": "URL parameters to include in the HTTP request, in key/value format.",
                "type": "object",
                "additionalProperties": true,
                "default": {},
                "properties": {}
              },
              "data": {
                "description": "JSON object to include as the body of the HTTP request.",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {}
                  },
                  {
                    "type": "string"
                  }
                ],
                "default": {}
              }
            }
          },
          "response": {
            "type": "object",
            "properties": {
              "headers": {
                "description": "Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren't present in the response, the step fails.",
                "type": "object",
                "additionalProperties": true,
                "properties": {},
                "default": {}
              },
              "data": {
                "description": "JSON object expected in the response. If one or more key/value pairs aren't present in the response, the step fails.",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {}
                  },
                  {
                    "type": "string"
                  }
                ],
                "default": {}
              }
            }
          },
          "allowAdditionalFields": {
            "type": "boolean",
            "description": "If `false`, the step fails when the response data contains fields not specified in thr response body.",
            "default": true
          },
          "path": {
            "type": "string",
            "description": "File path to save the command's output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."
          },
          "directory": {
            "type": "string",
            "description": "Directory to save the command's output. If the directory doesn't exist, creates the directory. If not specified, the directory is your media directory."
          },
          "maxVariation": {
            "type": "number",
            "description": "Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn't exist at `path`, this value is ignored.",
            "default": 0,
            "minimum": 0,
            "maximum": 1
          },
          "overwrite": {
            "type": "string",
            "description": "If `true`, overwrites the existing output at `path` if it exists.\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.",
            "enum": [
              "true",
              "false",
              "aboveVariation"
            ],
            "default": "false"
          }
        }
      }
    }
  },
  "examples": [
    "https://reqres.in/api/users",
    {
      "url": "https://reqres.in/api/users"
    },
    {
      "url": "https://reqres.in/api/users/2",
      "method": "put",
      "request": {
        "body": {
          "name": "morpheus",
          "job": "zion resident"
        }
      }
    },
    {
      "url": "https://reqres.in/api/users",
      "method": "post",
      "request": {
        "body": {
          "name": "morpheus",
          "job": "leader"
        }
      },
      "response": {
        "body": {
          "name": "morpheus",
          "job": "leader"
        }
      },
      "statusCodes": [
        200,
        201
      ]
    },
    {
      "url": "https://www.api-server.com",
      "method": "post",
      "timeout": 30000,
      "request": {
        "body": {
          "field": "value"
        },
        "headers": {
          "header": "value"
        },
        "params": {
          "param": "value"
        }
      },
      "response": {
        "body": {
          "field": "value"
        },
        "headers": {
          "header": "value"
        }
      },
      "statusCodes": [
        200
      ]
    },
    {
      "url": "https://reqres.in/api/users",
      "method": "post",
      "request": {
        "body": {
          "name": "morpheus",
          "job": "leader"
        }
      },
      "response": {
        "body": {
          "name": "morpheus",
          "job": "leader"
        }
      },
      "statusCodes": [
        200,
        201
      ],
      "path": "response.json",
      "directory": "media",
      "maxVariation": 0.05,
      "overwrite": "aboveVariation"
    },
    {
      "openApi": "getUserById"
    },
    {
      "openApi": {
        "descriptionName": "Reqres",
        "operationId": "getUserById"
      },
      "request": {
        "params": {
          "id": 123
        }
      }
    },
    {
      "openApi": {
        "descriptionPath": "https://api.example.com/openapi.json",
        "operationId": "getUserById"
      },
      "request": {
        "params": {
          "id": 123
        }
      }
    },
    {
      "openApi": {
        "descriptionPath": "https://api.example.com/openapi.json",
        "operationId": "createUser",
        "useExample": "both"
      }
    },
    {
      "openApi": {
        "descriptionPath": "https://api.example.com/openapi.json",
        "operationId": "updateUser",
        "useExample": "request",
        "exampleKey": "acme"
      }
    },
    {
      "openApi": {
        "descriptionPath": "https://api.example.com/openapi.json",
        "operationId": "updateUser",
        "useExample": "request",
        "exampleKey": "acme",
        "headers": {
          "Authorization": "Bearer $TOKEN"
        }
      }
    }
  ]
}