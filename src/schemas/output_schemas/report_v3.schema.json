{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "report",
  "type": "object",
  "dynamicDefaults": {
    "reportId": "uuid"
  },
  "properties": {
    "reportId": {
      "type": "string",
      "description": "Unique identifier for the test specification."
    },
    "specs": {
      "description": "Test specifications that were performed.",
      "type": "array",
      "minItems": 1,
      "items": {
        "anyOf": [
          {
            "$schema": "http://json-schema.org/draft-07/schema#",
            "title": "specification",
            "type": "object",
            "dynamicDefaults": {
              "specId": "uuid"
            },
            "properties": {
              "specId": {
                "type": "string",
                "description": "Unique identifier for the test specification."
              },
              "description": {
                "type": "string",
                "description": "Description of the test specification."
              },
              "contentPath": {
                "type": "string",
                "description": "Path to the content that the specification is associated with."
              },
              "runOn": {
                "type": "array",
                "description": "Contexts to run the test in. Overrides contexts defined at the config and spec levels.",
                "items": {
                  "oneOf": [
                    {
                      "title": "context",
                      "type": "object",
                      "description": "A context in which to perform tests. If no contexts are specified but a context is required by one or more tests, Doc Detective attempts to identify a supported context in the current environment and run tests against it. For example, if a browser isn't specified but is required by steps in the test, Doc Detective will search for and use a supported browser available in the current environment.",
                      "additionalProperties": false,
                      "properties": {
                        "platforms": {
                          "description": "Platforms to run tests on.",
                          "anyOf": [
                            {
                              "type": "string",
                              "enum": [
                                "linux",
                                "mac",
                                "windows"
                              ]
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "linux",
                                  "mac",
                                  "windows"
                                ]
                              }
                            }
                          ]
                        },
                        "browsers": {
                          "description": "Browsers to run tests on.",
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Name of the browser.",
                              "enum": [
                                "chrome",
                                "firefox",
                                "safari",
                                "webkit"
                              ],
                              "$comment": "`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."
                            },
                            {
                              "type": "object",
                              "description": "Browser configuration.",
                              "required": [
                                "name"
                              ],
                              "additionalProperties": false,
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the browser.",
                                  "enum": [
                                    "chrome",
                                    "firefox",
                                    "safari",
                                    "webkit"
                                  ],
                                  "$comment": "`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."
                                },
                                "executablePath": {
                                  "type": "string",
                                  "description": "Path to the browser executable. If not specified, defaults to the system default."
                                },
                                "driverPath": {
                                  "type": "string",
                                  "description": "Path to the browser driver. If not specified, defaults to internally managed dependencies."
                                },
                                "headless": {
                                  "type": "boolean",
                                  "description": "If `true`, runs the browser in headless mode."
                                },
                                "dimensions": {
                                  "type": "object",
                                  "description": "Browser dimensions.",
                                  "additionalProperties": false,
                                  "properties": {
                                    "width": {
                                      "type": "integer",
                                      "description": "Width of the browser window in pixels."
                                    },
                                    "height": {
                                      "type": "integer",
                                      "description": "Height of the browser window in pixels."
                                    }
                                  }
                                },
                                "viewport": {
                                  "type": "object",
                                  "description": "Viewport dimensions.",
                                  "additionalProperties": false,
                                  "properties": {
                                    "width": {
                                      "type": "integer",
                                      "description": "Width of the viewport in pixels."
                                    },
                                    "height": {
                                      "type": "integer",
                                      "description": "Height of the viewport in pixels."
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "array",
                              "items": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Name of the browser.",
                                    "enum": [
                                      "chrome",
                                      "firefox",
                                      "safari",
                                      "webkit"
                                    ],
                                    "$comment": "`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."
                                  },
                                  {
                                    "type": "object",
                                    "description": "Browser configuration.",
                                    "required": [
                                      "name"
                                    ],
                                    "additionalProperties": false,
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the browser.",
                                        "enum": [
                                          "chrome",
                                          "firefox",
                                          "safari",
                                          "webkit"
                                        ],
                                        "$comment": "`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."
                                      },
                                      "executablePath": {
                                        "type": "string",
                                        "description": "Path to the browser executable. If not specified, defaults to the system default."
                                      },
                                      "driverPath": {
                                        "type": "string",
                                        "description": "Path to the browser driver. If not specified, defaults to internally managed dependencies."
                                      },
                                      "headless": {
                                        "type": "boolean",
                                        "description": "If `true`, runs the browser in headless mode."
                                      },
                                      "dimensions": {
                                        "type": "object",
                                        "description": "Browser dimensions.",
                                        "additionalProperties": false,
                                        "properties": {
                                          "width": {
                                            "type": "integer",
                                            "description": "Width of the browser window in pixels."
                                          },
                                          "height": {
                                            "type": "integer",
                                            "description": "Height of the browser window in pixels."
                                          }
                                        }
                                      },
                                      "viewport": {
                                        "type": "object",
                                        "description": "Viewport dimensions.",
                                        "additionalProperties": false,
                                        "properties": {
                                          "width": {
                                            "type": "integer",
                                            "description": "Width of the viewport in pixels."
                                          },
                                          "height": {
                                            "type": "integer",
                                            "description": "Height of the viewport in pixels."
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "components": {
                        "schemas": {
                          "platform": {
                            "type": "string",
                            "enum": [
                              "linux",
                              "mac",
                              "windows"
                            ]
                          },
                          "browserName": {
                            "type": "string",
                            "description": "Name of the browser.",
                            "enum": [
                              "chrome",
                              "firefox",
                              "safari",
                              "webkit"
                            ],
                            "$comment": "`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."
                          },
                          "browser": {
                            "type": "object",
                            "description": "Browser configuration.",
                            "required": [
                              "name"
                            ],
                            "additionalProperties": false,
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Name of the browser.",
                                "enum": [
                                  "chrome",
                                  "firefox",
                                  "safari",
                                  "webkit"
                                ],
                                "$comment": "`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."
                              },
                              "executablePath": {
                                "type": "string",
                                "description": "Path to the browser executable. If not specified, defaults to the system default."
                              },
                              "driverPath": {
                                "type": "string",
                                "description": "Path to the browser driver. If not specified, defaults to internally managed dependencies."
                              },
                              "headless": {
                                "type": "boolean",
                                "description": "If `true`, runs the browser in headless mode."
                              },
                              "dimensions": {
                                "type": "object",
                                "description": "Browser dimensions.",
                                "additionalProperties": false,
                                "properties": {
                                  "width": {
                                    "type": "integer",
                                    "description": "Width of the browser window in pixels."
                                  },
                                  "height": {
                                    "type": "integer",
                                    "description": "Height of the browser window in pixels."
                                  }
                                }
                              },
                              "viewport": {
                                "type": "object",
                                "description": "Viewport dimensions.",
                                "additionalProperties": false,
                                "properties": {
                                  "width": {
                                    "type": "integer",
                                    "description": "Width of the viewport in pixels."
                                  },
                                  "height": {
                                    "type": "integer",
                                    "description": "Height of the viewport in pixels."
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "examples": [
                        {
                          "platforms": "linux",
                          "browsers": "chrome"
                        },
                        {
                          "platforms": [
                            "windows",
                            "mac",
                            "linux"
                          ],
                          "browsers": [
                            "chrome",
                            "firefox",
                            "webkit"
                          ]
                        },
                        {
                          "browsers": {
                            "name": "chrome",
                            "headless": true
                          }
                        },
                        {
                          "browsers": [
                            {
                              "name": "chrome",
                              "executablePath": "/usr/bin/google-chrome",
                              "headless": true
                            },
                            {
                              "name": "firefox",
                              "executablePath": "/usr/bin/firefox",
                              "driverPath": "/usr/local/bin/geckodriver"
                            }
                          ]
                        },
                        {
                          "platforms": [
                            "mac",
                            "linux"
                          ],
                          "browsers": {
                            "name": "chrome",
                            "headless": true
                          }
                        },
                        {
                          "platforms": [
                            "windows",
                            "mac",
                            "linux"
                          ],
                          "browsers": [
                            {
                              "name": "chrome",
                              "executablePath": "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
                              "driverPath": "C:\\WebDrivers\\chromedriver.exe",
                              "headless": true,
                              "dimensions": {
                                "width": 1920,
                                "height": 1080
                              },
                              "viewport": {
                                "width": 1600,
                                "height": 900
                              }
                            },
                            {
                              "name": "firefox",
                              "executablePath": "/usr/bin/firefox",
                              "driverPath": "/usr/local/bin/geckodriver",
                              "dimensions": {
                                "width": 1366,
                                "height": 768
                              }
                            },
                            {
                              "name": "webkit",
                              "executablePath": "/Applications/Safari.app/Contents/MacOS/Safari",
                              "headless": false,
                              "viewport": {
                                "width": 1440,
                                "height": 900
                              }
                            }
                          ]
                        },
                        {
                          "platforms": "mac",
                          "browsers": [
                            {
                              "name": "safari",
                              "executablePath": "/Applications/Safari.app/Contents/MacOS/Safari",
                              "dimensions": {
                                "width": 1280,
                                "height": 800
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "openApi": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "version": "1.0.0",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "openApi",
                      "type": "object",
                      "description": "OpenAPI description and configuration.",
                      "additionalProperties": false,
                      "properties": {
                        "descriptionName": {
                          "type": "string",
                          "description": "Name of the OpenAPI description, as defined in your configuration."
                        },
                        "descriptionPath": {
                          "type": "string",
                          "description": "URL or local path to the OpenAPI description."
                        },
                        "operationId": {
                          "type": "string",
                          "description": "ID of the operation to use for the request."
                        },
                        "server": {
                          "type": "string",
                          "description": "Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."
                        },
                        "validateAgainstSchema": {
                          "type": "string",
                          "description": "Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn't match the schema, the step fails.",
                          "enum": [
                            "request",
                            "response",
                            "both",
                            "none"
                          ],
                          "default": "both"
                        },
                        "mockResponse": {
                          "type": "boolean",
                          "description": "If `true`, doesn't make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn't fully implemented yet. If `statusCode` isn't specified, uses the first defined response code."
                        },
                        "statusCode": {
                          "type": "integer",
                          "description": "Response code to use for validation, examples, and status code checking. If the response code doesn't match, the step fails. `statusCodes` overrides this value when specified."
                        },
                        "useExample": {
                          "type": [
                            "string"
                          ],
                          "description": "Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn't specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.",
                          "enum": [
                            "request",
                            "response",
                            "both",
                            "none"
                          ],
                          "default": "none"
                        },
                        "exampleKey": {
                          "type": "string",
                          "description": "Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn't specified or isn't available for a given parameter or object, the `example` property value is used.",
                          "default": ""
                        },
                        "headers": {
                          "type": "object",
                          "description": "Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      },
                      "components": {
                        "schemas": {
                          "operationId": {
                            "type": "string",
                            "description": "ID of the operation to use for the request."
                          },
                          "descriptionPath": {
                            "type": "string",
                            "description": "URL or local path to the OpenAPI description."
                          }
                        }
                      },
                      "examples": [
                        {
                          "descriptionPath": "https://petstore.swagger.io/v2/swagger.json"
                        },
                        {
                          "descriptionName": "Reqres",
                          "operationId": "getUserById"
                        },
                        {
                          "descriptionPath": "https://api.example.com/openapi.json",
                          "operationId": "getUserById"
                        },
                        {
                          "descriptionPath": "https://api.example.com/openapi.json",
                          "operationId": "createUser",
                          "useExample": "both"
                        },
                        {
                          "descriptionPath": "https://api.example.com/openapi.json",
                          "operationId": "createUser",
                          "useExample": "both",
                          "exampleKey": "example1"
                        },
                        {
                          "descriptionPath": "https://api.example.com/openapi.json",
                          "operationId": "createUser",
                          "useExample": "both",
                          "exampleKey": "example1",
                          "statusCode": 201
                        },
                        {
                          "descriptionPath": "https://api.example.com/openapi.json",
                          "operationId": "createUser",
                          "useExample": "both",
                          "exampleKey": "example1",
                          "statusCode": 201,
                          "validateAgainstSchema": "none"
                        },
                        {
                          "descriptionPath": "https://api.example.com/openapi.json",
                          "operationId": "createUser",
                          "useExample": "both",
                          "exampleKey": "example1",
                          "statusCode": 201,
                          "validateAgainstSchema": "none",
                          "mockResponse": true
                        },
                        {
                          "descriptionPath": "https://api.example.com/openapi.json",
                          "operationId": "createUser",
                          "useExample": "both",
                          "exampleKey": "example1",
                          "statusCode": 201,
                          "validateAgainstSchema": "none",
                          "mockResponse": true,
                          "headers": {
                            "Authorization": "Bearer 12345"
                          }
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "not": {
                        "required": [
                          "operationId"
                        ]
                      },
                      "required": [
                        "descriptionName",
                        "descriptionPath"
                      ]
                    }
                  ]
                }
              },
              "tests": {
                "description": "[Tests](test) to perform.",
                "type": "array",
                "minItems": 1,
                "items": {
                  "anyOf": [
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "test",
                      "type": "object",
                      "description": "A Doc Detective test.",
                      "properties": {
                        "testId": {
                          "type": "string",
                          "description": "Unique identifier for the test."
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the test."
                        },
                        "contentPath": {
                          "type": "string",
                          "description": "Path to the content that the test is associated with."
                        },
                        "detectSteps": {
                          "type": "boolean",
                          "description": "Whether or not to detect steps in input files based on markup regex.",
                          "default": true
                        },
                        "runOn": {
                          "type": "array",
                          "description": "Contexts to run the test in. Overrides contexts defined at the config and spec levels.",
                          "items": {
                            "oneOf": [
                              {
                                "title": "context",
                                "type": "object",
                                "description": "A context in which to perform tests. If no contexts are specified but a context is required by one or more tests, Doc Detective attempts to identify a supported context in the current environment and run tests against it. For example, if a browser isn't specified but is required by steps in the test, Doc Detective will search for and use a supported browser available in the current environment.",
                                "additionalProperties": false,
                                "properties": {
                                  "platforms": {
                                    "description": "Platforms to run tests on.",
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "enum": [
                                          "linux",
                                          "mac",
                                          "windows"
                                        ]
                                      },
                                      {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "linux",
                                            "mac",
                                            "windows"
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "browsers": {
                                    "description": "Browsers to run tests on.",
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Name of the browser.",
                                        "enum": [
                                          "chrome",
                                          "firefox",
                                          "safari",
                                          "webkit"
                                        ],
                                        "$comment": "`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."
                                      },
                                      {
                                        "type": "object",
                                        "description": "Browser configuration.",
                                        "required": [
                                          "name"
                                        ],
                                        "additionalProperties": false,
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "Name of the browser.",
                                            "enum": [
                                              "chrome",
                                              "firefox",
                                              "safari",
                                              "webkit"
                                            ],
                                            "$comment": "`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."
                                          },
                                          "executablePath": {
                                            "type": "string",
                                            "description": "Path to the browser executable. If not specified, defaults to the system default."
                                          },
                                          "driverPath": {
                                            "type": "string",
                                            "description": "Path to the browser driver. If not specified, defaults to internally managed dependencies."
                                          },
                                          "headless": {
                                            "type": "boolean",
                                            "description": "If `true`, runs the browser in headless mode."
                                          },
                                          "dimensions": {
                                            "type": "object",
                                            "description": "Browser dimensions.",
                                            "additionalProperties": false,
                                            "properties": {
                                              "width": {
                                                "type": "integer",
                                                "description": "Width of the browser window in pixels."
                                              },
                                              "height": {
                                                "type": "integer",
                                                "description": "Height of the browser window in pixels."
                                              }
                                            }
                                          },
                                          "viewport": {
                                            "type": "object",
                                            "description": "Viewport dimensions.",
                                            "additionalProperties": false,
                                            "properties": {
                                              "width": {
                                                "type": "integer",
                                                "description": "Width of the viewport in pixels."
                                              },
                                              "height": {
                                                "type": "integer",
                                                "description": "Height of the viewport in pixels."
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "type": "array",
                                        "items": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "description": "Name of the browser.",
                                              "enum": [
                                                "chrome",
                                                "firefox",
                                                "safari",
                                                "webkit"
                                              ],
                                              "$comment": "`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."
                                            },
                                            {
                                              "type": "object",
                                              "description": "Browser configuration.",
                                              "required": [
                                                "name"
                                              ],
                                              "additionalProperties": false,
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "description": "Name of the browser.",
                                                  "enum": [
                                                    "chrome",
                                                    "firefox",
                                                    "safari",
                                                    "webkit"
                                                  ],
                                                  "$comment": "`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."
                                                },
                                                "executablePath": {
                                                  "type": "string",
                                                  "description": "Path to the browser executable. If not specified, defaults to the system default."
                                                },
                                                "driverPath": {
                                                  "type": "string",
                                                  "description": "Path to the browser driver. If not specified, defaults to internally managed dependencies."
                                                },
                                                "headless": {
                                                  "type": "boolean",
                                                  "description": "If `true`, runs the browser in headless mode."
                                                },
                                                "dimensions": {
                                                  "type": "object",
                                                  "description": "Browser dimensions.",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "width": {
                                                      "type": "integer",
                                                      "description": "Width of the browser window in pixels."
                                                    },
                                                    "height": {
                                                      "type": "integer",
                                                      "description": "Height of the browser window in pixels."
                                                    }
                                                  }
                                                },
                                                "viewport": {
                                                  "type": "object",
                                                  "description": "Viewport dimensions.",
                                                  "additionalProperties": false,
                                                  "properties": {
                                                    "width": {
                                                      "type": "integer",
                                                      "description": "Width of the viewport in pixels."
                                                    },
                                                    "height": {
                                                      "type": "integer",
                                                      "description": "Height of the viewport in pixels."
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                },
                                "components": {
                                  "schemas": {
                                    "platform": {
                                      "type": "string",
                                      "enum": [
                                        "linux",
                                        "mac",
                                        "windows"
                                      ]
                                    },
                                    "browserName": {
                                      "type": "string",
                                      "description": "Name of the browser.",
                                      "enum": [
                                        "chrome",
                                        "firefox",
                                        "safari",
                                        "webkit"
                                      ],
                                      "$comment": "`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."
                                    },
                                    "browser": {
                                      "type": "object",
                                      "description": "Browser configuration.",
                                      "required": [
                                        "name"
                                      ],
                                      "additionalProperties": false,
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "description": "Name of the browser.",
                                          "enum": [
                                            "chrome",
                                            "firefox",
                                            "safari",
                                            "webkit"
                                          ],
                                          "$comment": "`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."
                                        },
                                        "executablePath": {
                                          "type": "string",
                                          "description": "Path to the browser executable. If not specified, defaults to the system default."
                                        },
                                        "driverPath": {
                                          "type": "string",
                                          "description": "Path to the browser driver. If not specified, defaults to internally managed dependencies."
                                        },
                                        "headless": {
                                          "type": "boolean",
                                          "description": "If `true`, runs the browser in headless mode."
                                        },
                                        "dimensions": {
                                          "type": "object",
                                          "description": "Browser dimensions.",
                                          "additionalProperties": false,
                                          "properties": {
                                            "width": {
                                              "type": "integer",
                                              "description": "Width of the browser window in pixels."
                                            },
                                            "height": {
                                              "type": "integer",
                                              "description": "Height of the browser window in pixels."
                                            }
                                          }
                                        },
                                        "viewport": {
                                          "type": "object",
                                          "description": "Viewport dimensions.",
                                          "additionalProperties": false,
                                          "properties": {
                                            "width": {
                                              "type": "integer",
                                              "description": "Width of the viewport in pixels."
                                            },
                                            "height": {
                                              "type": "integer",
                                              "description": "Height of the viewport in pixels."
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "examples": [
                                  {
                                    "platforms": "linux",
                                    "browsers": "chrome"
                                  },
                                  {
                                    "platforms": [
                                      "windows",
                                      "mac",
                                      "linux"
                                    ],
                                    "browsers": [
                                      "chrome",
                                      "firefox",
                                      "webkit"
                                    ]
                                  },
                                  {
                                    "browsers": {
                                      "name": "chrome",
                                      "headless": true
                                    }
                                  },
                                  {
                                    "browsers": [
                                      {
                                        "name": "chrome",
                                        "executablePath": "/usr/bin/google-chrome",
                                        "headless": true
                                      },
                                      {
                                        "name": "firefox",
                                        "executablePath": "/usr/bin/firefox",
                                        "driverPath": "/usr/local/bin/geckodriver"
                                      }
                                    ]
                                  },
                                  {
                                    "platforms": [
                                      "mac",
                                      "linux"
                                    ],
                                    "browsers": {
                                      "name": "chrome",
                                      "headless": true
                                    }
                                  },
                                  {
                                    "platforms": [
                                      "windows",
                                      "mac",
                                      "linux"
                                    ],
                                    "browsers": [
                                      {
                                        "name": "chrome",
                                        "executablePath": "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
                                        "driverPath": "C:\\WebDrivers\\chromedriver.exe",
                                        "headless": true,
                                        "dimensions": {
                                          "width": 1920,
                                          "height": 1080
                                        },
                                        "viewport": {
                                          "width": 1600,
                                          "height": 900
                                        }
                                      },
                                      {
                                        "name": "firefox",
                                        "executablePath": "/usr/bin/firefox",
                                        "driverPath": "/usr/local/bin/geckodriver",
                                        "dimensions": {
                                          "width": 1366,
                                          "height": 768
                                        }
                                      },
                                      {
                                        "name": "webkit",
                                        "executablePath": "/Applications/Safari.app/Contents/MacOS/Safari",
                                        "headless": false,
                                        "viewport": {
                                          "width": 1440,
                                          "height": 900
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "platforms": "mac",
                                    "browsers": [
                                      {
                                        "name": "safari",
                                        "executablePath": "/Applications/Safari.app/Contents/MacOS/Safari",
                                        "dimensions": {
                                          "width": 1280,
                                          "height": 800
                                        }
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        "openApi": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "version": "1.0.0",
                                "$schema": "http://json-schema.org/draft-07/schema#",
                                "title": "openApi",
                                "type": "object",
                                "description": "OpenAPI description and configuration.",
                                "additionalProperties": false,
                                "properties": {
                                  "descriptionName": {
                                    "type": "string",
                                    "description": "Name of the OpenAPI description, as defined in your configuration."
                                  },
                                  "descriptionPath": {
                                    "type": "string",
                                    "description": "URL or local path to the OpenAPI description."
                                  },
                                  "operationId": {
                                    "type": "string",
                                    "description": "ID of the operation to use for the request."
                                  },
                                  "server": {
                                    "type": "string",
                                    "description": "Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."
                                  },
                                  "validateAgainstSchema": {
                                    "type": "string",
                                    "description": "Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn't match the schema, the step fails.",
                                    "enum": [
                                      "request",
                                      "response",
                                      "both",
                                      "none"
                                    ],
                                    "default": "both"
                                  },
                                  "mockResponse": {
                                    "type": "boolean",
                                    "description": "If `true`, doesn't make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn't fully implemented yet. If `statusCode` isn't specified, uses the first defined response code."
                                  },
                                  "statusCode": {
                                    "type": "integer",
                                    "description": "Response code to use for validation, examples, and status code checking. If the response code doesn't match, the step fails. `statusCodes` overrides this value when specified."
                                  },
                                  "useExample": {
                                    "type": [
                                      "string"
                                    ],
                                    "description": "Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn't specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.",
                                    "enum": [
                                      "request",
                                      "response",
                                      "both",
                                      "none"
                                    ],
                                    "default": "none"
                                  },
                                  "exampleKey": {
                                    "type": "string",
                                    "description": "Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn't specified or isn't available for a given parameter or object, the `example` property value is used.",
                                    "default": ""
                                  },
                                  "headers": {
                                    "type": "object",
                                    "description": "Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "components": {
                                  "schemas": {
                                    "operationId": {
                                      "type": "string",
                                      "description": "ID of the operation to use for the request."
                                    },
                                    "descriptionPath": {
                                      "type": "string",
                                      "description": "URL or local path to the OpenAPI description."
                                    }
                                  }
                                },
                                "examples": [
                                  {
                                    "descriptionPath": "https://petstore.swagger.io/v2/swagger.json"
                                  },
                                  {
                                    "descriptionName": "Reqres",
                                    "operationId": "getUserById"
                                  },
                                  {
                                    "descriptionPath": "https://api.example.com/openapi.json",
                                    "operationId": "getUserById"
                                  },
                                  {
                                    "descriptionPath": "https://api.example.com/openapi.json",
                                    "operationId": "createUser",
                                    "useExample": "both"
                                  },
                                  {
                                    "descriptionPath": "https://api.example.com/openapi.json",
                                    "operationId": "createUser",
                                    "useExample": "both",
                                    "exampleKey": "example1"
                                  },
                                  {
                                    "descriptionPath": "https://api.example.com/openapi.json",
                                    "operationId": "createUser",
                                    "useExample": "both",
                                    "exampleKey": "example1",
                                    "statusCode": 201
                                  },
                                  {
                                    "descriptionPath": "https://api.example.com/openapi.json",
                                    "operationId": "createUser",
                                    "useExample": "both",
                                    "exampleKey": "example1",
                                    "statusCode": 201,
                                    "validateAgainstSchema": "none"
                                  },
                                  {
                                    "descriptionPath": "https://api.example.com/openapi.json",
                                    "operationId": "createUser",
                                    "useExample": "both",
                                    "exampleKey": "example1",
                                    "statusCode": 201,
                                    "validateAgainstSchema": "none",
                                    "mockResponse": true
                                  },
                                  {
                                    "descriptionPath": "https://api.example.com/openapi.json",
                                    "operationId": "createUser",
                                    "useExample": "both",
                                    "exampleKey": "example1",
                                    "statusCode": 201,
                                    "validateAgainstSchema": "none",
                                    "mockResponse": true,
                                    "headers": {
                                      "Authorization": "Bearer 12345"
                                    }
                                  }
                                ]
                              },
                              {
                                "type": "object",
                                "not": {
                                  "required": [
                                    "operationId"
                                  ]
                                },
                                "required": [
                                  "descriptionName",
                                  "descriptionPath"
                                ]
                              }
                            ]
                          }
                        },
                        "before": {
                          "type": "string",
                          "description": "Path to a test specification to perform before this test, while maintaining this test's context. Useful for setting up testing environments. Only the `steps` property is used from the first test in the setup spec."
                        },
                        "after": {
                          "type": "string",
                          "description": "Path to a test specification to perform after this test, while maintaining this test's context. Useful for cleaning up testing environments. Only the `steps` property is used from the first test in the cleanup spec."
                        },
                        "steps": {
                          "description": "Steps to perform as part of the test. Performed in the sequence defined. If one or more actions fail, the test fails. By default, if a step fails, the test stops and the remaining steps are not executed.",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "$schema": "http://json-schema.org/draft-07/schema#",
                            "title": "step",
                            "description": "A step in a test.",
                            "type": "object",
                            "components": {
                              "schemas": {
                                "common": {
                                  "type": "object",
                                  "dynamicDefaults": {
                                    "stepId": "uuid"
                                  },
                                  "properties": {
                                    "stepId": {
                                      "type": "string",
                                      "description": "ID of the step."
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "Description of the step."
                                    },
                                    "outputs": {
                                      "type": "object",
                                      "description": "Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.",
                                      "default": {},
                                      "patternProperties": {
                                        "^[A-Za-z0-9_]+$": {
                                          "type": "string",
                                          "description": "Runtime expression for a user-defined output value."
                                        }
                                      }
                                    },
                                    "variables": {
                                      "type": "object",
                                      "description": "Environment variables to set from user-defined expressions.",
                                      "default": {},
                                      "patternProperties": {
                                        "^[A-Za-z0-9_]+$": {
                                          "type": "string",
                                          "description": "Runtime expression for a user-defined output value."
                                        }
                                      }
                                    }
                                  }
                                },
                                "stepId": {
                                  "type": "string",
                                  "description": "ID of the step."
                                },
                                "description": {
                                  "type": "string",
                                  "description": "Description of the step."
                                },
                                "outputs": {
                                  "type": "object",
                                  "description": "Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.",
                                  "default": {},
                                  "patternProperties": {
                                    "^[A-Za-z0-9_]+$": {
                                      "type": "string",
                                      "description": "Runtime expression for a user-defined output value."
                                    }
                                  }
                                },
                                "variables": {
                                  "type": "object",
                                  "description": "Environment variables to set from user-defined expressions.",
                                  "default": {},
                                  "patternProperties": {
                                    "^[A-Za-z0-9_]+$": {
                                      "type": "string",
                                      "description": "Runtime expression for a user-defined output value."
                                    }
                                  }
                                }
                              }
                            },
                            "anyOf": [
                              {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "dynamicDefaults": {
                                      "stepId": "uuid"
                                    },
                                    "properties": {
                                      "stepId": {
                                        "type": "string",
                                        "description": "ID of the step."
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "Description of the step."
                                      },
                                      "outputs": {
                                        "type": "object",
                                        "description": "Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      },
                                      "variables": {
                                        "type": "object",
                                        "description": "Environment variables to set from user-defined expressions.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "checkLink"
                                    ],
                                    "properties": {
                                      "checkLink": {
                                        "$schema": "http://json-schema.org/draft-07/schema#",
                                        "title": "checkLink",
                                        "anyOf": [
                                          {
                                            "description": "Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.",
                                            "type": "string",
                                            "pattern": "(^(http://|https://|/).*|\\$[A-Za-z0-9_]+)",
                                            "transform": [
                                              "trim"
                                            ]
                                          },
                                          {
                                            "description": "Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.",
                                            "type": "object",
                                            "additionalProperties": false,
                                            "required": [
                                              "url"
                                            ],
                                            "properties": {
                                              "url": {
                                                "type": "string",
                                                "description": "URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.",
                                                "pattern": "(^(http://|https://|/).*|\\$[A-Za-z0-9_]+)",
                                                "transform": [
                                                  "trim"
                                                ]
                                              },
                                              "origin": {
                                                "type": "string",
                                                "description": "Protocol and domain to navigate to. Prepended to `url`.",
                                                "transform": [
                                                  "trim"
                                                ]
                                              },
                                              "statusCodes": {
                                                "description": "Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.",
                                                "anyOf": [
                                                  {
                                                    "type": "integer"
                                                  },
                                                  {
                                                    "type": "array",
                                                    "items": {
                                                      "oneOf": [
                                                        {
                                                          "type": "integer"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ],
                                                "default": [
                                                  200,
                                                  301,
                                                  302,
                                                  307,
                                                  308
                                                ]
                                              }
                                            }
                                          }
                                        ],
                                        "components": {
                                          "schemas": {
                                            "string": {
                                              "description": "Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.",
                                              "type": "string",
                                              "pattern": "(^(http://|https://|/).*|\\$[A-Za-z0-9_]+)",
                                              "transform": [
                                                "trim"
                                              ]
                                            },
                                            "object": {
                                              "description": "Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.",
                                              "type": "object",
                                              "additionalProperties": false,
                                              "required": [
                                                "url"
                                              ],
                                              "properties": {
                                                "url": {
                                                  "type": "string",
                                                  "description": "URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.",
                                                  "pattern": "(^(http://|https://|/).*|\\$[A-Za-z0-9_]+)",
                                                  "transform": [
                                                    "trim"
                                                  ]
                                                },
                                                "origin": {
                                                  "type": "string",
                                                  "description": "Protocol and domain to navigate to. Prepended to `url`.",
                                                  "transform": [
                                                    "trim"
                                                  ]
                                                },
                                                "statusCodes": {
                                                  "description": "Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.",
                                                  "anyOf": [
                                                    {
                                                      "type": "integer"
                                                    },
                                                    {
                                                      "type": "array",
                                                      "items": {
                                                        "oneOf": [
                                                          {
                                                            "type": "integer"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ],
                                                  "default": [
                                                    200,
                                                    301,
                                                    302,
                                                    307,
                                                    308
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "examples": [
                                          "https://www.google.com",
                                          "/search",
                                          {
                                            "url": "https://www.google.com",
                                            "statusCodes": 200
                                          },
                                          {
                                            "url": "/search",
                                            "origin": "www.google.com",
                                            "statusCodes": [
                                              200
                                            ]
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "dynamicDefaults": {
                                      "stepId": "uuid"
                                    },
                                    "properties": {
                                      "stepId": {
                                        "type": "string",
                                        "description": "ID of the step."
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "Description of the step."
                                      },
                                      "outputs": {
                                        "type": "object",
                                        "description": "Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      },
                                      "variables": {
                                        "type": "object",
                                        "description": "Environment variables to set from user-defined expressions.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "click"
                                    ],
                                    "properties": {
                                      "click": {
                                        "$schema": "http://json-schema.org/draft-07/schema#",
                                        "title": "click",
                                        "description": "Click or tap an element.",
                                        "anyOf": [
                                          {
                                            "description": "Kind of click to perform.",
                                            "type": "string",
                                            "enum": [
                                              "left",
                                              "right",
                                              "middle"
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "button": {
                                                "description": "Kind of click to perform.",
                                                "type": "string",
                                                "enum": [
                                                  "left",
                                                  "right",
                                                  "middle"
                                                ]
                                              },
                                              "elementText": {
                                                "type": "string",
                                                "description": "Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."
                                              },
                                              "selector": {
                                                "type": "string",
                                                "description": "Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."
                                              }
                                            }
                                          },
                                          {
                                            "type": "boolean",
                                            "nullable": true
                                          }
                                        ],
                                        "components": {
                                          "schemas": {
                                            "button": {
                                              "description": "Kind of click to perform.",
                                              "type": "string",
                                              "enum": [
                                                "left",
                                                "right",
                                                "middle"
                                              ]
                                            },
                                            "object": {
                                              "type": "object",
                                              "properties": {
                                                "button": {
                                                  "description": "Kind of click to perform.",
                                                  "type": "string",
                                                  "enum": [
                                                    "left",
                                                    "right",
                                                    "middle"
                                                  ]
                                                },
                                                "elementText": {
                                                  "type": "string",
                                                  "description": "Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."
                                                },
                                                "selector": {
                                                  "type": "string",
                                                  "description": "Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "examples": [
                                          true,
                                          "right",
                                          {
                                            "button": "left",
                                            "elementText": "Element text"
                                          },
                                          {
                                            "selector": "#elementToScreenshot",
                                            "elementText": "Element text",
                                            "button": "middle"
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "dynamicDefaults": {
                                      "stepId": "uuid"
                                    },
                                    "properties": {
                                      "stepId": {
                                        "type": "string",
                                        "description": "ID of the step."
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "Description of the step."
                                      },
                                      "outputs": {
                                        "type": "object",
                                        "description": "Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      },
                                      "variables": {
                                        "type": "object",
                                        "description": "Environment variables to set from user-defined expressions.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "find"
                                    ],
                                    "properties": {
                                      "find": {
                                        "$schema": "http://json-schema.org/draft-07/schema#",
                                        "title": "find",
                                        "description": "Find an element based on display text or a selector, then optionally interact with it.",
                                        "components": {
                                          "schemas": {
                                            "string": {
                                              "title": "Find element (simple)",
                                              "type": "string",
                                              "description": "Display text or selector of the element to find."
                                            },
                                            "object": {
                                              "title": "Find element (detailed)",
                                              "type": "object",
                                              "anyOf": [
                                                {
                                                  "required": [
                                                    "selector"
                                                  ]
                                                },
                                                {
                                                  "required": [
                                                    "elementText"
                                                  ]
                                                }
                                              ],
                                              "additionalProperties": false,
                                              "properties": {
                                                "elementText": {
                                                  "type": "string",
                                                  "description": "Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."
                                                },
                                                "selector": {
                                                  "type": "string",
                                                  "description": "Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."
                                                },
                                                "timeout": {
                                                  "type": "integer",
                                                  "description": "Max duration in milliseconds to wait for the element to exist.",
                                                  "default": 5000
                                                },
                                                "moveTo": {
                                                  "description": "Move to the element. If the element isn't visible, it's scrolled into view.",
                                                  "type": "boolean",
                                                  "default": true
                                                },
                                                "click": {
                                                  "description": "Click the element.",
                                                  "allOf": [
                                                    {
                                                      "$schema": "http://json-schema.org/draft-07/schema#",
                                                      "title": "click",
                                                      "description": "Click or tap an element.",
                                                      "anyOf": [
                                                        {
                                                          "description": "Kind of click to perform.",
                                                          "type": "string",
                                                          "enum": [
                                                            "left",
                                                            "right",
                                                            "middle"
                                                          ]
                                                        },
                                                        {
                                                          "type": "object",
                                                          "properties": {
                                                            "button": {
                                                              "description": "Kind of click to perform.",
                                                              "type": "string",
                                                              "enum": [
                                                                "left",
                                                                "right",
                                                                "middle"
                                                              ]
                                                            },
                                                            "elementText": {
                                                              "type": "string",
                                                              "description": "Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."
                                                            },
                                                            "selector": {
                                                              "type": "string",
                                                              "description": "Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "boolean",
                                                          "nullable": true
                                                        }
                                                      ],
                                                      "components": {
                                                        "schemas": {
                                                          "button": {
                                                            "description": "Kind of click to perform.",
                                                            "type": "string",
                                                            "enum": [
                                                              "left",
                                                              "right",
                                                              "middle"
                                                            ]
                                                          },
                                                          "object": {
                                                            "type": "object",
                                                            "properties": {
                                                              "button": {
                                                                "description": "Kind of click to perform.",
                                                                "type": "string",
                                                                "enum": [
                                                                  "left",
                                                                  "right",
                                                                  "middle"
                                                                ]
                                                              },
                                                              "elementText": {
                                                                "type": "string",
                                                                "description": "Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."
                                                              },
                                                              "selector": {
                                                                "type": "string",
                                                                "description": "Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "examples": [
                                                        true,
                                                        "right",
                                                        {
                                                          "button": "left",
                                                          "elementText": "Element text"
                                                        },
                                                        {
                                                          "selector": "#elementToScreenshot",
                                                          "elementText": "Element text",
                                                          "button": "middle"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "not": {
                                                        "required": [
                                                          "selector",
                                                          "elementText"
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "type": {
                                                  "description": "Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.",
                                                  "allOf": [
                                                    {
                                                      "$schema": "http://json-schema.org/draft-07/schema#",
                                                      "title": "typeKeys",
                                                      "description": "Type keys. To type special keys, begin and end the string with `$` and use the special key's keyword. For example, to type the Escape key, enter `$ESCAPE$`.",
                                                      "anyOf": [
                                                        {
                                                          "description": "Sequence of keys to enter.",
                                                          "anyOf": [
                                                            {
                                                              "type": "string"
                                                            },
                                                            {
                                                              "type": "array",
                                                              "items": {
                                                                "oneOf": [
                                                                  {
                                                                    "type": "string"
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "object",
                                                          "properties": {
                                                            "keys": {
                                                              "description": "Sequence of keys to enter.",
                                                              "anyOf": [
                                                                {
                                                                  "type": "string"
                                                                },
                                                                {
                                                                  "type": "array",
                                                                  "items": {
                                                                    "oneOf": [
                                                                      {
                                                                        "type": "string"
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "inputDelay": {
                                                              "type": "number",
                                                              "description": "Delay in milliseconds between each key press. If not specified during a recording, defaults to `100`."
                                                            },
                                                            "selector": {
                                                              "type": "string",
                                                              "description": "Selector for the element to type into. If not specified, the typing occurs in the active element."
                                                            }
                                                          },
                                                          "required": [
                                                            "keys"
                                                          ],
                                                          "additionalProperties": false
                                                        }
                                                      ],
                                                      "components": {
                                                        "schemas": {
                                                          "keys": {
                                                            "description": "Sequence of keys to enter.",
                                                            "anyOf": [
                                                              {
                                                                "type": "string"
                                                              },
                                                              {
                                                                "type": "array",
                                                                "items": {
                                                                  "oneOf": [
                                                                    {
                                                                      "type": "string"
                                                                    }
                                                                  ]
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "object": {
                                                            "type": "object",
                                                            "properties": {
                                                              "keys": {
                                                                "description": "Sequence of keys to enter.",
                                                                "anyOf": [
                                                                  {
                                                                    "type": "string"
                                                                  },
                                                                  {
                                                                    "type": "array",
                                                                    "items": {
                                                                      "oneOf": [
                                                                        {
                                                                          "type": "string"
                                                                        }
                                                                      ]
                                                                    }
                                                                  }
                                                                ]
                                                              },
                                                              "inputDelay": {
                                                                "type": "number",
                                                                "description": "Delay in milliseconds between each key press. If not specified during a recording, defaults to `100`."
                                                              },
                                                              "selector": {
                                                                "type": "string",
                                                                "description": "Selector for the element to type into. If not specified, the typing occurs in the active element."
                                                              }
                                                            },
                                                            "required": [
                                                              "keys"
                                                            ],
                                                            "additionalProperties": false
                                                          }
                                                        }
                                                      },
                                                      "examples": [
                                                        "kittens",
                                                        [
                                                          "$ENTER$"
                                                        ],
                                                        [
                                                          "kittens",
                                                          "$ENTER$"
                                                        ],
                                                        {
                                                          "keys": "kittens"
                                                        },
                                                        {
                                                          "keys": [
                                                            "$ENTER$"
                                                          ]
                                                        },
                                                        {
                                                          "keys": [
                                                            "kittens",
                                                            "$ENTER$"
                                                          ],
                                                          "inputDelay": 500
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "not": {
                                                        "required": [
                                                          "selector",
                                                          "elementText"
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "examples": [
                                          "Find me!",
                                          {
                                            "selector": "[title=Search]"
                                          },
                                          {
                                            "selector": "[title=Search]",
                                            "timeout": 10000,
                                            "elementText": "Search",
                                            "moveTo": true,
                                            "click": true,
                                            "type": "shorthair cat"
                                          },
                                          {
                                            "selector": "[title=Search]",
                                            "click": {
                                              "button": "right"
                                            }
                                          },
                                          {
                                            "selector": "[title=Search]",
                                            "timeout": 10000,
                                            "elementText": "Search",
                                            "moveTo": true,
                                            "click": true,
                                            "type": {
                                              "keys": [
                                                "shorthair cat"
                                              ],
                                              "inputDelay": 100
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "dynamicDefaults": {
                                      "stepId": "uuid"
                                    },
                                    "properties": {
                                      "stepId": {
                                        "type": "string",
                                        "description": "ID of the step."
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "Description of the step."
                                      },
                                      "outputs": {
                                        "type": "object",
                                        "description": "Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      },
                                      "variables": {
                                        "type": "object",
                                        "description": "Environment variables to set from user-defined expressions.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "goTo"
                                    ],
                                    "properties": {
                                      "goTo": {
                                        "$schema": "http://json-schema.org/draft-07/schema#",
                                        "title": "goTo",
                                        "anyOf": [
                                          {
                                            "description": "Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.",
                                            "type": "string",
                                            "pattern": "(^(http://|https://|/).*|\\$[A-Za-z0-9_]+)",
                                            "transform": [
                                              "trim"
                                            ]
                                          },
                                          {
                                            "description": "Navigate to an HTTP or HTTPS URL.",
                                            "type": "object",
                                            "additionalProperties": false,
                                            "required": [
                                              "url"
                                            ],
                                            "properties": {
                                              "url": {
                                                "type": "string",
                                                "description": "URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn't specified, attempts to navigate relative to the current URL, if any.",
                                                "pattern": "(^(http://|https://|/).*|\\$[A-Za-z0-9_]+)",
                                                "transform": [
                                                  "trim"
                                                ]
                                              },
                                              "origin": {
                                                "type": "string",
                                                "description": "Protocol and domain to navigate to. Prepended to `url`.",
                                                "transform": [
                                                  "trim"
                                                ]
                                              }
                                            }
                                          }
                                        ],
                                        "components": {
                                          "schemas": {
                                            "string": {
                                              "description": "Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.",
                                              "type": "string",
                                              "pattern": "(^(http://|https://|/).*|\\$[A-Za-z0-9_]+)",
                                              "transform": [
                                                "trim"
                                              ]
                                            },
                                            "object": {
                                              "description": "Navigate to an HTTP or HTTPS URL.",
                                              "type": "object",
                                              "additionalProperties": false,
                                              "required": [
                                                "url"
                                              ],
                                              "properties": {
                                                "url": {
                                                  "type": "string",
                                                  "description": "URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn't specified, attempts to navigate relative to the current URL, if any.",
                                                  "pattern": "(^(http://|https://|/).*|\\$[A-Za-z0-9_]+)",
                                                  "transform": [
                                                    "trim"
                                                  ]
                                                },
                                                "origin": {
                                                  "type": "string",
                                                  "description": "Protocol and domain to navigate to. Prepended to `url`.",
                                                  "transform": [
                                                    "trim"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "examples": [
                                          "https://www.google.com",
                                          "/search",
                                          {
                                            "url": "https://www.google.com"
                                          },
                                          {
                                            "url": "/search",
                                            "origin": "www.google.com"
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "dynamicDefaults": {
                                      "stepId": "uuid"
                                    },
                                    "properties": {
                                      "stepId": {
                                        "type": "string",
                                        "description": "ID of the step."
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "Description of the step."
                                      },
                                      "outputs": {
                                        "type": "object",
                                        "description": "Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      },
                                      "variables": {
                                        "type": "object",
                                        "description": "Environment variables to set from user-defined expressions.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "httpRequest"
                                    ],
                                    "properties": {
                                      "httpRequest": {
                                        "title": "httpRequest",
                                        "description": "Perform a generic HTTP request, for example to an API.",
                                        "anyOf": [
                                          {
                                            "title": "URL",
                                            "type": "string",
                                            "description": "URL for the HTTP request.",
                                            "pattern": "(^(http://|https://).*|\\$[A-Za-z0-9_]+)",
                                            "transform": [
                                              "trim"
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "anyOf": [
                                              {
                                                "required": [
                                                  "url"
                                                ]
                                              },
                                              {
                                                "required": [
                                                  "openApi"
                                                ]
                                              }
                                            ],
                                            "additionalProperties": false,
                                            "properties": {
                                              "url": {
                                                "title": "URL",
                                                "type": "string",
                                                "description": "URL for the HTTP request.",
                                                "pattern": "(^(http://|https://).*|\\$[A-Za-z0-9_]+)",
                                                "transform": [
                                                  "trim"
                                                ]
                                              },
                                              "openApi": {
                                                "anyOf": [
                                                  {
                                                    "allOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "ID of the operation to use for the request."
                                                      },
                                                      {
                                                        "title": "Operation ID",
                                                        "description": "Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."
                                                      }
                                                    ]
                                                  },
                                                  {
                                                    "allOf": [
                                                      {
                                                        "version": "1.0.0",
                                                        "$schema": "http://json-schema.org/draft-07/schema#",
                                                        "title": "openApi",
                                                        "type": "object",
                                                        "description": "OpenAPI description and configuration.",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                          "descriptionName": {
                                                            "type": "string",
                                                            "description": "Name of the OpenAPI description, as defined in your configuration."
                                                          },
                                                          "descriptionPath": {
                                                            "type": "string",
                                                            "description": "URL or local path to the OpenAPI description."
                                                          },
                                                          "operationId": {
                                                            "type": "string",
                                                            "description": "ID of the operation to use for the request."
                                                          },
                                                          "server": {
                                                            "type": "string",
                                                            "description": "Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."
                                                          },
                                                          "validateAgainstSchema": {
                                                            "type": "string",
                                                            "description": "Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn't match the schema, the step fails.",
                                                            "enum": [
                                                              "request",
                                                              "response",
                                                              "both",
                                                              "none"
                                                            ],
                                                            "default": "both"
                                                          },
                                                          "mockResponse": {
                                                            "type": "boolean",
                                                            "description": "If `true`, doesn't make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn't fully implemented yet. If `statusCode` isn't specified, uses the first defined response code."
                                                          },
                                                          "statusCode": {
                                                            "type": "integer",
                                                            "description": "Response code to use for validation, examples, and status code checking. If the response code doesn't match, the step fails. `statusCodes` overrides this value when specified."
                                                          },
                                                          "useExample": {
                                                            "type": [
                                                              "string"
                                                            ],
                                                            "description": "Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn't specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.",
                                                            "enum": [
                                                              "request",
                                                              "response",
                                                              "both",
                                                              "none"
                                                            ],
                                                            "default": "none"
                                                          },
                                                          "exampleKey": {
                                                            "type": "string",
                                                            "description": "Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn't specified or isn't available for a given parameter or object, the `example` property value is used.",
                                                            "default": ""
                                                          },
                                                          "headers": {
                                                            "type": "object",
                                                            "description": "Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.",
                                                            "additionalProperties": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        },
                                                        "components": {
                                                          "schemas": {
                                                            "operationId": {
                                                              "type": "string",
                                                              "description": "ID of the operation to use for the request."
                                                            },
                                                            "descriptionPath": {
                                                              "type": "string",
                                                              "description": "URL or local path to the OpenAPI description."
                                                            }
                                                          }
                                                        },
                                                        "examples": [
                                                          {
                                                            "descriptionPath": "https://petstore.swagger.io/v2/swagger.json"
                                                          },
                                                          {
                                                            "descriptionName": "Reqres",
                                                            "operationId": "getUserById"
                                                          },
                                                          {
                                                            "descriptionPath": "https://api.example.com/openapi.json",
                                                            "operationId": "getUserById"
                                                          },
                                                          {
                                                            "descriptionPath": "https://api.example.com/openapi.json",
                                                            "operationId": "createUser",
                                                            "useExample": "both"
                                                          },
                                                          {
                                                            "descriptionPath": "https://api.example.com/openapi.json",
                                                            "operationId": "createUser",
                                                            "useExample": "both",
                                                            "exampleKey": "example1"
                                                          },
                                                          {
                                                            "descriptionPath": "https://api.example.com/openapi.json",
                                                            "operationId": "createUser",
                                                            "useExample": "both",
                                                            "exampleKey": "example1",
                                                            "statusCode": 201
                                                          },
                                                          {
                                                            "descriptionPath": "https://api.example.com/openapi.json",
                                                            "operationId": "createUser",
                                                            "useExample": "both",
                                                            "exampleKey": "example1",
                                                            "statusCode": 201,
                                                            "validateAgainstSchema": "none"
                                                          },
                                                          {
                                                            "descriptionPath": "https://api.example.com/openapi.json",
                                                            "operationId": "createUser",
                                                            "useExample": "both",
                                                            "exampleKey": "example1",
                                                            "statusCode": 201,
                                                            "validateAgainstSchema": "none",
                                                            "mockResponse": true
                                                          },
                                                          {
                                                            "descriptionPath": "https://api.example.com/openapi.json",
                                                            "operationId": "createUser",
                                                            "useExample": "both",
                                                            "exampleKey": "example1",
                                                            "statusCode": 201,
                                                            "validateAgainstSchema": "none",
                                                            "mockResponse": true,
                                                            "headers": {
                                                              "Authorization": "Bearer 12345"
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      {
                                                        "type": "object",
                                                        "required": [
                                                          "operationId"
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              "statusCodes": {
                                                "description": "Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.",
                                                "type": "array",
                                                "items": {
                                                  "oneOf": [
                                                    {
                                                      "type": "integer"
                                                    }
                                                  ]
                                                },
                                                "default": [
                                                  200
                                                ]
                                              },
                                              "method": {
                                                "type": "string",
                                                "description": "Method of the HTTP request",
                                                "enum": [
                                                  "get",
                                                  "put",
                                                  "post",
                                                  "patch",
                                                  "delete"
                                                ],
                                                "transform": [
                                                  "trim",
                                                  "toEnumCase"
                                                ],
                                                "default": "get"
                                              },
                                              "timeout": {
                                                "type": "integer",
                                                "description": "Timeout for the HTTP request, in milliseconds.",
                                                "default": 60000
                                              },
                                              "request": {
                                                "type": "object",
                                                "properties": {
                                                  "headers": {
                                                    "description": "Headers to include in the HTTP request, in key/value format.",
                                                    "type": "object",
                                                    "additionalProperties": true,
                                                    "properties": {},
                                                    "default": {}
                                                  },
                                                  "params": {
                                                    "description": "URL parameters to include in the HTTP request, in key/value format.",
                                                    "type": "object",
                                                    "additionalProperties": true,
                                                    "default": {},
                                                    "properties": {}
                                                  },
                                                  "data": {
                                                    "description": "JSON object to include as the body of the HTTP request.",
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "additionalProperties": true,
                                                        "properties": {}
                                                      },
                                                      {
                                                        "type": "string"
                                                      }
                                                    ],
                                                    "default": {}
                                                  }
                                                }
                                              },
                                              "response": {
                                                "type": "object",
                                                "properties": {
                                                  "headers": {
                                                    "description": "Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren't present in the response, the step fails.",
                                                    "type": "object",
                                                    "additionalProperties": true,
                                                    "properties": {},
                                                    "default": {}
                                                  },
                                                  "data": {
                                                    "description": "JSON object expected in the response. If one or more key/value pairs aren't present in the response, the step fails.",
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "additionalProperties": true,
                                                        "properties": {}
                                                      },
                                                      {
                                                        "type": "string"
                                                      }
                                                    ],
                                                    "default": {}
                                                  }
                                                }
                                              },
                                              "allowAdditionalFields": {
                                                "type": "boolean",
                                                "description": "If `false`, the step fails when the response data contains fields not specified in thr response body.",
                                                "default": true
                                              },
                                              "path": {
                                                "type": "string",
                                                "description": "File path to save the command's output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."
                                              },
                                              "directory": {
                                                "type": "string",
                                                "description": "Directory to save the command's output. If the directory doesn't exist, creates the directory. If not specified, the directory is your media directory."
                                              },
                                              "maxVariation": {
                                                "type": "number",
                                                "description": "Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn't exist at `path`, this value is ignored.",
                                                "default": 0,
                                                "minimum": 0,
                                                "maximum": 1
                                              },
                                              "overwrite": {
                                                "type": "string",
                                                "description": "If `true`, overwrites the existing output at `path` if it exists.\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.",
                                                "enum": [
                                                  "true",
                                                  "false",
                                                  "aboveVariation"
                                                ],
                                                "default": "false"
                                              }
                                            }
                                          }
                                        ],
                                        "components": {
                                          "schemas": {
                                            "url": {
                                              "title": "URL",
                                              "type": "string",
                                              "description": "URL for the HTTP request.",
                                              "pattern": "(^(http://|https://).*|\\$[A-Za-z0-9_]+)",
                                              "transform": [
                                                "trim"
                                              ]
                                            },
                                            "object": {
                                              "type": "object",
                                              "anyOf": [
                                                {
                                                  "required": [
                                                    "url"
                                                  ]
                                                },
                                                {
                                                  "required": [
                                                    "openApi"
                                                  ]
                                                }
                                              ],
                                              "additionalProperties": false,
                                              "properties": {
                                                "url": {
                                                  "title": "URL",
                                                  "type": "string",
                                                  "description": "URL for the HTTP request.",
                                                  "pattern": "(^(http://|https://).*|\\$[A-Za-z0-9_]+)",
                                                  "transform": [
                                                    "trim"
                                                  ]
                                                },
                                                "openApi": {
                                                  "anyOf": [
                                                    {
                                                      "allOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "ID of the operation to use for the request."
                                                        },
                                                        {
                                                          "title": "Operation ID",
                                                          "description": "Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "allOf": [
                                                        {
                                                          "version": "1.0.0",
                                                          "$schema": "http://json-schema.org/draft-07/schema#",
                                                          "title": "openApi",
                                                          "type": "object",
                                                          "description": "OpenAPI description and configuration.",
                                                          "additionalProperties": false,
                                                          "properties": {
                                                            "descriptionName": {
                                                              "type": "string",
                                                              "description": "Name of the OpenAPI description, as defined in your configuration."
                                                            },
                                                            "descriptionPath": {
                                                              "type": "string",
                                                              "description": "URL or local path to the OpenAPI description."
                                                            },
                                                            "operationId": {
                                                              "type": "string",
                                                              "description": "ID of the operation to use for the request."
                                                            },
                                                            "server": {
                                                              "type": "string",
                                                              "description": "Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."
                                                            },
                                                            "validateAgainstSchema": {
                                                              "type": "string",
                                                              "description": "Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn't match the schema, the step fails.",
                                                              "enum": [
                                                                "request",
                                                                "response",
                                                                "both",
                                                                "none"
                                                              ],
                                                              "default": "both"
                                                            },
                                                            "mockResponse": {
                                                              "type": "boolean",
                                                              "description": "If `true`, doesn't make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn't fully implemented yet. If `statusCode` isn't specified, uses the first defined response code."
                                                            },
                                                            "statusCode": {
                                                              "type": "integer",
                                                              "description": "Response code to use for validation, examples, and status code checking. If the response code doesn't match, the step fails. `statusCodes` overrides this value when specified."
                                                            },
                                                            "useExample": {
                                                              "type": [
                                                                "string"
                                                              ],
                                                              "description": "Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn't specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.",
                                                              "enum": [
                                                                "request",
                                                                "response",
                                                                "both",
                                                                "none"
                                                              ],
                                                              "default": "none"
                                                            },
                                                            "exampleKey": {
                                                              "type": "string",
                                                              "description": "Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn't specified or isn't available for a given parameter or object, the `example` property value is used.",
                                                              "default": ""
                                                            },
                                                            "headers": {
                                                              "type": "object",
                                                              "description": "Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.",
                                                              "additionalProperties": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          },
                                                          "components": {
                                                            "schemas": {
                                                              "operationId": {
                                                                "type": "string",
                                                                "description": "ID of the operation to use for the request."
                                                              },
                                                              "descriptionPath": {
                                                                "type": "string",
                                                                "description": "URL or local path to the OpenAPI description."
                                                              }
                                                            }
                                                          },
                                                          "examples": [
                                                            {
                                                              "descriptionPath": "https://petstore.swagger.io/v2/swagger.json"
                                                            },
                                                            {
                                                              "descriptionName": "Reqres",
                                                              "operationId": "getUserById"
                                                            },
                                                            {
                                                              "descriptionPath": "https://api.example.com/openapi.json",
                                                              "operationId": "getUserById"
                                                            },
                                                            {
                                                              "descriptionPath": "https://api.example.com/openapi.json",
                                                              "operationId": "createUser",
                                                              "useExample": "both"
                                                            },
                                                            {
                                                              "descriptionPath": "https://api.example.com/openapi.json",
                                                              "operationId": "createUser",
                                                              "useExample": "both",
                                                              "exampleKey": "example1"
                                                            },
                                                            {
                                                              "descriptionPath": "https://api.example.com/openapi.json",
                                                              "operationId": "createUser",
                                                              "useExample": "both",
                                                              "exampleKey": "example1",
                                                              "statusCode": 201
                                                            },
                                                            {
                                                              "descriptionPath": "https://api.example.com/openapi.json",
                                                              "operationId": "createUser",
                                                              "useExample": "both",
                                                              "exampleKey": "example1",
                                                              "statusCode": 201,
                                                              "validateAgainstSchema": "none"
                                                            },
                                                            {
                                                              "descriptionPath": "https://api.example.com/openapi.json",
                                                              "operationId": "createUser",
                                                              "useExample": "both",
                                                              "exampleKey": "example1",
                                                              "statusCode": 201,
                                                              "validateAgainstSchema": "none",
                                                              "mockResponse": true
                                                            },
                                                            {
                                                              "descriptionPath": "https://api.example.com/openapi.json",
                                                              "operationId": "createUser",
                                                              "useExample": "both",
                                                              "exampleKey": "example1",
                                                              "statusCode": 201,
                                                              "validateAgainstSchema": "none",
                                                              "mockResponse": true,
                                                              "headers": {
                                                                "Authorization": "Bearer 12345"
                                                              }
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "object",
                                                          "required": [
                                                            "operationId"
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                "statusCodes": {
                                                  "description": "Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.",
                                                  "type": "array",
                                                  "items": {
                                                    "oneOf": [
                                                      {
                                                        "type": "integer"
                                                      }
                                                    ]
                                                  },
                                                  "default": [
                                                    200
                                                  ]
                                                },
                                                "method": {
                                                  "type": "string",
                                                  "description": "Method of the HTTP request",
                                                  "enum": [
                                                    "get",
                                                    "put",
                                                    "post",
                                                    "patch",
                                                    "delete"
                                                  ],
                                                  "transform": [
                                                    "trim",
                                                    "toEnumCase"
                                                  ],
                                                  "default": "get"
                                                },
                                                "timeout": {
                                                  "type": "integer",
                                                  "description": "Timeout for the HTTP request, in milliseconds.",
                                                  "default": 60000
                                                },
                                                "request": {
                                                  "type": "object",
                                                  "properties": {
                                                    "headers": {
                                                      "description": "Headers to include in the HTTP request, in key/value format.",
                                                      "type": "object",
                                                      "additionalProperties": true,
                                                      "properties": {},
                                                      "default": {}
                                                    },
                                                    "params": {
                                                      "description": "URL parameters to include in the HTTP request, in key/value format.",
                                                      "type": "object",
                                                      "additionalProperties": true,
                                                      "default": {},
                                                      "properties": {}
                                                    },
                                                    "data": {
                                                      "description": "JSON object to include as the body of the HTTP request.",
                                                      "anyOf": [
                                                        {
                                                          "type": "object",
                                                          "additionalProperties": true,
                                                          "properties": {}
                                                        },
                                                        {
                                                          "type": "string"
                                                        }
                                                      ],
                                                      "default": {}
                                                    }
                                                  }
                                                },
                                                "response": {
                                                  "type": "object",
                                                  "properties": {
                                                    "headers": {
                                                      "description": "Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren't present in the response, the step fails.",
                                                      "type": "object",
                                                      "additionalProperties": true,
                                                      "properties": {},
                                                      "default": {}
                                                    },
                                                    "data": {
                                                      "description": "JSON object expected in the response. If one or more key/value pairs aren't present in the response, the step fails.",
                                                      "anyOf": [
                                                        {
                                                          "type": "object",
                                                          "additionalProperties": true,
                                                          "properties": {}
                                                        },
                                                        {
                                                          "type": "string"
                                                        }
                                                      ],
                                                      "default": {}
                                                    }
                                                  }
                                                },
                                                "allowAdditionalFields": {
                                                  "type": "boolean",
                                                  "description": "If `false`, the step fails when the response data contains fields not specified in thr response body.",
                                                  "default": true
                                                },
                                                "path": {
                                                  "type": "string",
                                                  "description": "File path to save the command's output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."
                                                },
                                                "directory": {
                                                  "type": "string",
                                                  "description": "Directory to save the command's output. If the directory doesn't exist, creates the directory. If not specified, the directory is your media directory."
                                                },
                                                "maxVariation": {
                                                  "type": "number",
                                                  "description": "Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn't exist at `path`, this value is ignored.",
                                                  "default": 0,
                                                  "minimum": 0,
                                                  "maximum": 1
                                                },
                                                "overwrite": {
                                                  "type": "string",
                                                  "description": "If `true`, overwrites the existing output at `path` if it exists.\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.",
                                                  "enum": [
                                                    "true",
                                                    "false",
                                                    "aboveVariation"
                                                  ],
                                                  "default": "false"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "examples": [
                                          "https://reqres.in/api/users",
                                          {
                                            "url": "https://reqres.in/api/users"
                                          },
                                          {
                                            "url": "https://reqres.in/api/users/2",
                                            "method": "put",
                                            "request": {
                                              "body": {
                                                "name": "morpheus",
                                                "job": "zion resident"
                                              }
                                            }
                                          },
                                          {
                                            "url": "https://reqres.in/api/users",
                                            "method": "post",
                                            "request": {
                                              "body": {
                                                "name": "morpheus",
                                                "job": "leader"
                                              }
                                            },
                                            "response": {
                                              "body": {
                                                "name": "morpheus",
                                                "job": "leader"
                                              }
                                            },
                                            "statusCodes": [
                                              200,
                                              201
                                            ]
                                          },
                                          {
                                            "url": "https://www.api-server.com",
                                            "method": "post",
                                            "timeout": 30000,
                                            "request": {
                                              "body": {
                                                "field": "value"
                                              },
                                              "headers": {
                                                "header": "value"
                                              },
                                              "params": {
                                                "param": "value"
                                              }
                                            },
                                            "response": {
                                              "body": {
                                                "field": "value"
                                              },
                                              "headers": {
                                                "header": "value"
                                              }
                                            },
                                            "statusCodes": [
                                              200
                                            ]
                                          },
                                          {
                                            "url": "https://reqres.in/api/users",
                                            "method": "post",
                                            "request": {
                                              "body": {
                                                "name": "morpheus",
                                                "job": "leader"
                                              }
                                            },
                                            "response": {
                                              "body": {
                                                "name": "morpheus",
                                                "job": "leader"
                                              }
                                            },
                                            "statusCodes": [
                                              200,
                                              201
                                            ],
                                            "path": "response.json",
                                            "directory": "media",
                                            "maxVariation": 0.05,
                                            "overwrite": "aboveVariation"
                                          },
                                          {
                                            "openApi": "getUserById"
                                          },
                                          {
                                            "openApi": {
                                              "descriptionName": "Reqres",
                                              "operationId": "getUserById"
                                            },
                                            "request": {
                                              "params": {
                                                "id": 123
                                              }
                                            }
                                          },
                                          {
                                            "openApi": {
                                              "descriptionPath": "https://api.example.com/openapi.json",
                                              "operationId": "getUserById"
                                            },
                                            "request": {
                                              "params": {
                                                "id": 123
                                              }
                                            }
                                          },
                                          {
                                            "openApi": {
                                              "descriptionPath": "https://api.example.com/openapi.json",
                                              "operationId": "createUser",
                                              "useExample": "both"
                                            }
                                          },
                                          {
                                            "openApi": {
                                              "descriptionPath": "https://api.example.com/openapi.json",
                                              "operationId": "updateUser",
                                              "useExample": "request",
                                              "exampleKey": "acme"
                                            }
                                          },
                                          {
                                            "openApi": {
                                              "descriptionPath": "https://api.example.com/openapi.json",
                                              "operationId": "updateUser",
                                              "useExample": "request",
                                              "exampleKey": "acme",
                                              "headers": {
                                                "Authorization": "Bearer $TOKEN"
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "dynamicDefaults": {
                                      "stepId": "uuid"
                                    },
                                    "properties": {
                                      "stepId": {
                                        "type": "string",
                                        "description": "ID of the step."
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "Description of the step."
                                      },
                                      "outputs": {
                                        "type": "object",
                                        "description": "Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      },
                                      "variables": {
                                        "type": "object",
                                        "description": "Environment variables to set from user-defined expressions.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "runShell"
                                    ],
                                    "properties": {
                                      "runShell": {
                                        "$schema": "http://json-schema.org/draft-07/schema#",
                                        "title": "runShell",
                                        "description": "Perform a native shell command.",
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "transform": [
                                              "trim"
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "required": [
                                              "command"
                                            ],
                                            "additionalProperties": false,
                                            "properties": {
                                              "command": {
                                                "type": "string",
                                                "description": "Command to perform in the machine's default shell."
                                              },
                                              "args": {
                                                "type": "array",
                                                "description": "Arguments for the command.",
                                                "items": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    }
                                                  ]
                                                },
                                                "default": []
                                              },
                                              "workingDirectory": {
                                                "type": "string",
                                                "description": "Working directory for the command.",
                                                "default": "."
                                              },
                                              "exitCodes": {
                                                "type": "array",
                                                "description": "Expected exit codes of the command. If the command's actual exit code isn't in this list, the step fails.",
                                                "items": {
                                                  "oneOf": [
                                                    {
                                                      "type": "integer"
                                                    }
                                                  ]
                                                },
                                                "default": [
                                                  0
                                                ]
                                              },
                                              "stdio": {
                                                "type": "string",
                                                "description": "Content expected in the command's stdout or stderr. If the expected content can't be found in the command's stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."
                                              },
                                              "path": {
                                                "type": "string",
                                                "description": "File path to save the command's output, relative to `directory`."
                                              },
                                              "directory": {
                                                "type": "string",
                                                "description": "Directory to save the command's output. If the directory doesn't exist, creates the directory. If not specified, the directory is your media directory."
                                              },
                                              "maxVariation": {
                                                "type": "number",
                                                "description": "Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn't exist at `path`, this value is ignored.",
                                                "default": 0,
                                                "minimum": 0,
                                                "maximum": 1
                                              },
                                              "overwrite": {
                                                "type": "string",
                                                "description": "If `true`, overwrites the existing output at `path` if it exists.\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.",
                                                "enum": [
                                                  "true",
                                                  "false",
                                                  "aboveVariation"
                                                ],
                                                "default": "aboveVariation"
                                              },
                                              "timeout": {
                                                "type": "integer",
                                                "description": "Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.",
                                                "default": 60000
                                              }
                                            }
                                          }
                                        ],
                                        "components": {
                                          "schemas": {
                                            "string": {
                                              "type": "string",
                                              "transform": [
                                                "trim"
                                              ]
                                            },
                                            "object": {
                                              "type": "object",
                                              "required": [
                                                "command"
                                              ],
                                              "additionalProperties": false,
                                              "properties": {
                                                "command": {
                                                  "type": "string",
                                                  "description": "Command to perform in the machine's default shell."
                                                },
                                                "args": {
                                                  "type": "array",
                                                  "description": "Arguments for the command.",
                                                  "items": {
                                                    "oneOf": [
                                                      {
                                                        "type": "string"
                                                      }
                                                    ]
                                                  },
                                                  "default": []
                                                },
                                                "workingDirectory": {
                                                  "type": "string",
                                                  "description": "Working directory for the command.",
                                                  "default": "."
                                                },
                                                "exitCodes": {
                                                  "type": "array",
                                                  "description": "Expected exit codes of the command. If the command's actual exit code isn't in this list, the step fails.",
                                                  "items": {
                                                    "oneOf": [
                                                      {
                                                        "type": "integer"
                                                      }
                                                    ]
                                                  },
                                                  "default": [
                                                    0
                                                  ]
                                                },
                                                "stdio": {
                                                  "type": "string",
                                                  "description": "Content expected in the command's stdout or stderr. If the expected content can't be found in the command's stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."
                                                },
                                                "path": {
                                                  "type": "string",
                                                  "description": "File path to save the command's output, relative to `directory`."
                                                },
                                                "directory": {
                                                  "type": "string",
                                                  "description": "Directory to save the command's output. If the directory doesn't exist, creates the directory. If not specified, the directory is your media directory."
                                                },
                                                "maxVariation": {
                                                  "type": "number",
                                                  "description": "Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn't exist at `path`, this value is ignored.",
                                                  "default": 0,
                                                  "minimum": 0,
                                                  "maximum": 1
                                                },
                                                "overwrite": {
                                                  "type": "string",
                                                  "description": "If `true`, overwrites the existing output at `path` if it exists.\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.",
                                                  "enum": [
                                                    "true",
                                                    "false",
                                                    "aboveVariation"
                                                  ],
                                                  "default": "aboveVariation"
                                                },
                                                "timeout": {
                                                  "type": "integer",
                                                  "description": "Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.",
                                                  "default": 60000
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "examples": [
                                          "docker run hello-world",
                                          {
                                            "command": "echo",
                                            "args": [
                                              "$USER"
                                            ]
                                          },
                                          {
                                            "command": "echo",
                                            "args": [
                                              "hello-world"
                                            ]
                                          },
                                          {
                                            "command": "docker run hello-world",
                                            "timeout": 20000,
                                            "exitCodes": [
                                              0
                                            ],
                                            "stdio": "Hello from Docker!"
                                          },
                                          {
                                            "command": "false",
                                            "exitCodes": [
                                              1
                                            ]
                                          },
                                          {
                                            "command": "echo",
                                            "args": [
                                              "setup"
                                            ],
                                            "exitCodes": [
                                              0
                                            ],
                                            "stdio": "/.*?/"
                                          },
                                          {
                                            "command": "docker run hello-world",
                                            "workingDirectory": ".",
                                            "exitCodes": [
                                              0
                                            ],
                                            "stdio": "Hello from Docker!",
                                            "path": "docker-output.txt",
                                            "directory": "output",
                                            "maxVariation": 0.1,
                                            "overwrite": "aboveVariation"
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "dynamicDefaults": {
                                      "stepId": "uuid"
                                    },
                                    "properties": {
                                      "stepId": {
                                        "type": "string",
                                        "description": "ID of the step."
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "Description of the step."
                                      },
                                      "outputs": {
                                        "type": "object",
                                        "description": "Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      },
                                      "variables": {
                                        "type": "object",
                                        "description": "Environment variables to set from user-defined expressions.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "runCode"
                                    ],
                                    "properties": {
                                      "runCode": {
                                        "$schema": "http://json-schema.org/draft-07/schema#",
                                        "title": "runCode",
                                        "description": "Assemble and run code.",
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "required": [
                                              "code",
                                              "language"
                                            ],
                                            "properties": {
                                              "language": {
                                                "type": "string",
                                                "description": "Language of the code to run. If not specified, the code is run in the shell.",
                                                "enum": [
                                                  "python",
                                                  "bash",
                                                  "javascript"
                                                ]
                                              },
                                              "code": {
                                                "description": "Code to run.",
                                                "type": "string"
                                              },
                                              "args": {
                                                "type": "array",
                                                "description": "Arguments for the command.",
                                                "items": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    }
                                                  ]
                                                },
                                                "default": []
                                              },
                                              "workingDirectory": {
                                                "type": "string",
                                                "description": "Working directory for the command.",
                                                "default": "."
                                              },
                                              "exitCodes": {
                                                "type": "array",
                                                "description": "Expected exit codes of the command. If the command's actual exit code isn't in this list, the step fails.",
                                                "items": {
                                                  "oneOf": [
                                                    {
                                                      "type": "integer"
                                                    }
                                                  ]
                                                },
                                                "default": [
                                                  0
                                                ]
                                              },
                                              "stdio": {
                                                "type": "string",
                                                "description": "Content expected in the command's output. If the expected content can't be found in the command's output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."
                                              },
                                              "path": {
                                                "type": "string",
                                                "description": "File path to save the command's output, relative to `directory`."
                                              },
                                              "directory": {
                                                "type": "string",
                                                "description": "Directory to save the command's output. If the directory doesn't exist, creates the directory. If not specified, the directory is your media directory."
                                              },
                                              "maxVariation": {
                                                "type": "number",
                                                "description": "Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn't exist at `path`, this value is ignored.",
                                                "default": 0,
                                                "minimum": 0,
                                                "maximum": 1
                                              },
                                              "overwrite": {
                                                "type": "string",
                                                "description": "If `true`, overwrites the existing output at `path` if it exists.\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.",
                                                "enum": [
                                                  "true",
                                                  "false",
                                                  "aboveVariation"
                                                ],
                                                "default": "aboveVariation"
                                              },
                                              "timeout": {
                                                "type": "integer",
                                                "description": "Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.",
                                                "default": 60000
                                              }
                                            }
                                          }
                                        ],
                                        "components": {
                                          "schemas": {
                                            "object": {
                                              "type": "object",
                                              "required": [
                                                "code",
                                                "language"
                                              ],
                                              "properties": {
                                                "language": {
                                                  "type": "string",
                                                  "description": "Language of the code to run. If not specified, the code is run in the shell.",
                                                  "enum": [
                                                    "python",
                                                    "bash",
                                                    "javascript"
                                                  ]
                                                },
                                                "code": {
                                                  "description": "Code to run.",
                                                  "type": "string"
                                                },
                                                "args": {
                                                  "type": "array",
                                                  "description": "Arguments for the command.",
                                                  "items": {
                                                    "oneOf": [
                                                      {
                                                        "type": "string"
                                                      }
                                                    ]
                                                  },
                                                  "default": []
                                                },
                                                "workingDirectory": {
                                                  "type": "string",
                                                  "description": "Working directory for the command.",
                                                  "default": "."
                                                },
                                                "exitCodes": {
                                                  "type": "array",
                                                  "description": "Expected exit codes of the command. If the command's actual exit code isn't in this list, the step fails.",
                                                  "items": {
                                                    "oneOf": [
                                                      {
                                                        "type": "integer"
                                                      }
                                                    ]
                                                  },
                                                  "default": [
                                                    0
                                                  ]
                                                },
                                                "stdio": {
                                                  "type": "string",
                                                  "description": "Content expected in the command's output. If the expected content can't be found in the command's output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."
                                                },
                                                "path": {
                                                  "type": "string",
                                                  "description": "File path to save the command's output, relative to `directory`."
                                                },
                                                "directory": {
                                                  "type": "string",
                                                  "description": "Directory to save the command's output. If the directory doesn't exist, creates the directory. If not specified, the directory is your media directory."
                                                },
                                                "maxVariation": {
                                                  "type": "number",
                                                  "description": "Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn't exist at `path`, this value is ignored.",
                                                  "default": 0,
                                                  "minimum": 0,
                                                  "maximum": 1
                                                },
                                                "overwrite": {
                                                  "type": "string",
                                                  "description": "If `true`, overwrites the existing output at `path` if it exists.\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.",
                                                  "enum": [
                                                    "true",
                                                    "false",
                                                    "aboveVariation"
                                                  ],
                                                  "default": "aboveVariation"
                                                },
                                                "timeout": {
                                                  "type": "integer",
                                                  "description": "Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.",
                                                  "default": 60000
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "examples": [
                                          {
                                            "language": "javascript",
                                            "code": "console.log('Hello, ${process.env.USER}!');"
                                          },
                                          {
                                            "language": "bash",
                                            "code": "docker run hello-world",
                                            "timeout": 20000,
                                            "exitCodes": [
                                              0
                                            ],
                                            "stdio": "Hello from Docker!"
                                          },
                                          {
                                            "language": "javascript",
                                            "code": "return false",
                                            "exitCodes": [
                                              1
                                            ]
                                          },
                                          {
                                            "language": "python",
                                            "code": "print('Hello from Python')",
                                            "workingDirectory": ".",
                                            "exitCodes": [
                                              0
                                            ],
                                            "stdio": "Hello from Python!",
                                            "path": "python-output.txt",
                                            "directory": "output",
                                            "maxVariation": 0.1,
                                            "overwrite": "aboveVariation"
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "dynamicDefaults": {
                                      "stepId": "uuid"
                                    },
                                    "properties": {
                                      "stepId": {
                                        "type": "string",
                                        "description": "ID of the step."
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "Description of the step."
                                      },
                                      "outputs": {
                                        "type": "object",
                                        "description": "Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      },
                                      "variables": {
                                        "type": "object",
                                        "description": "Environment variables to set from user-defined expressions.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "type"
                                    ],
                                    "properties": {
                                      "type": {
                                        "$schema": "http://json-schema.org/draft-07/schema#",
                                        "title": "typeKeys",
                                        "description": "Type keys. To type special keys, begin and end the string with `$` and use the special key's keyword. For example, to type the Escape key, enter `$ESCAPE$`.",
                                        "anyOf": [
                                          {
                                            "description": "Sequence of keys to enter.",
                                            "anyOf": [
                                              {
                                                "type": "string"
                                              },
                                              {
                                                "type": "array",
                                                "items": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "keys": {
                                                "description": "Sequence of keys to enter.",
                                                "anyOf": [
                                                  {
                                                    "type": "string"
                                                  },
                                                  {
                                                    "type": "array",
                                                    "items": {
                                                      "oneOf": [
                                                        {
                                                          "type": "string"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "inputDelay": {
                                                "type": "number",
                                                "description": "Delay in milliseconds between each key press. If not specified during a recording, defaults to `100`."
                                              },
                                              "selector": {
                                                "type": "string",
                                                "description": "Selector for the element to type into. If not specified, the typing occurs in the active element."
                                              }
                                            },
                                            "required": [
                                              "keys"
                                            ],
                                            "additionalProperties": false
                                          }
                                        ],
                                        "components": {
                                          "schemas": {
                                            "keys": {
                                              "description": "Sequence of keys to enter.",
                                              "anyOf": [
                                                {
                                                  "type": "string"
                                                },
                                                {
                                                  "type": "array",
                                                  "items": {
                                                    "oneOf": [
                                                      {
                                                        "type": "string"
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "object": {
                                              "type": "object",
                                              "properties": {
                                                "keys": {
                                                  "description": "Sequence of keys to enter.",
                                                  "anyOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "array",
                                                      "items": {
                                                        "oneOf": [
                                                          {
                                                            "type": "string"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "inputDelay": {
                                                  "type": "number",
                                                  "description": "Delay in milliseconds between each key press. If not specified during a recording, defaults to `100`."
                                                },
                                                "selector": {
                                                  "type": "string",
                                                  "description": "Selector for the element to type into. If not specified, the typing occurs in the active element."
                                                }
                                              },
                                              "required": [
                                                "keys"
                                              ],
                                              "additionalProperties": false
                                            }
                                          }
                                        },
                                        "examples": [
                                          "kittens",
                                          [
                                            "$ENTER$"
                                          ],
                                          [
                                            "kittens",
                                            "$ENTER$"
                                          ],
                                          {
                                            "keys": "kittens"
                                          },
                                          {
                                            "keys": [
                                              "$ENTER$"
                                            ]
                                          },
                                          {
                                            "keys": [
                                              "kittens",
                                              "$ENTER$"
                                            ],
                                            "inputDelay": 500
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "dynamicDefaults": {
                                      "stepId": "uuid"
                                    },
                                    "properties": {
                                      "stepId": {
                                        "type": "string",
                                        "description": "ID of the step."
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "Description of the step."
                                      },
                                      "outputs": {
                                        "type": "object",
                                        "description": "Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      },
                                      "variables": {
                                        "type": "object",
                                        "description": "Environment variables to set from user-defined expressions.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "screenshot"
                                    ],
                                    "properties": {
                                      "screenshot": {
                                        "$schema": "http://json-schema.org/draft-07/schema#",
                                        "title": "screenshot",
                                        "description": "Takes a screenshot in PNG format.",
                                        "anyOf": [
                                          {
                                            "description": "File path of the PNG file, relative to your media directory. Accepts absolute paths. If not specified, the file name is the ID of the step.",
                                            "type": "string",
                                            "pattern": "([A-Za-z0-9_-]*\\.(png|PNG)$|\\$[A-Za-z0-9_]+)",
                                            "transform": [
                                              "trim"
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "path": {
                                                "type": "string",
                                                "description": "File path of the PNG file, relative to `directory`. If not specified, the file name is the ID of the step.",
                                                "pattern": "([A-Za-z0-9_-]*\\.(png|PNG)$|\\$[A-Za-z0-9_]+)",
                                                "transform": [
                                                  "trim"
                                                ]
                                              },
                                              "directory": {
                                                "type": "string",
                                                "description": "Directory of the PNG file. If the directory doesn't exist, creates the directory.",
                                                "transform": [
                                                  "trim"
                                                ]
                                              },
                                              "maxVariation": {
                                                "type": "number",
                                                "description": "Allowed variation in percentage of pixels between the new screenshot and the exisitng screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn't exist at `path`, this value is ignored.",
                                                "default": 0.05,
                                                "minimum": 0,
                                                "maximum": 1
                                              },
                                              "overwrite": {
                                                "type": "string",
                                                "description": "If `true`, overwrites the existing screenshot at `path` if it exists.\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.",
                                                "enum": [
                                                  "true",
                                                  "false",
                                                  "aboveVariation"
                                                ],
                                                "default": "aboveVariation"
                                              },
                                              "crop": {
                                                "anyOf": [
                                                  {
                                                    "title": "Crop by element",
                                                    "type": "string",
                                                    "description": "Display text or selector of the element to screenshot."
                                                  },
                                                  {
                                                    "title": "Crop by element (detailed)",
                                                    "type": "object",
                                                    "description": "Crop the screenshot to a specific element.",
                                                    "additionalProperties": false,
                                                    "anyOf": [
                                                      {
                                                        "required": [
                                                          "selector"
                                                        ]
                                                      },
                                                      {
                                                        "required": [
                                                          "elementText"
                                                        ]
                                                      }
                                                    ],
                                                    "properties": {
                                                      "elementText": {
                                                        "type": "string",
                                                        "description": "Display text of the element to screenshot."
                                                      },
                                                      "selector": {
                                                        "type": "string",
                                                        "description": "Selector of the element to screenshot."
                                                      },
                                                      "padding": {
                                                        "anyOf": [
                                                          {
                                                            "type": "number",
                                                            "description": "Padding in pixels to add to the bounds of the element.",
                                                            "minimum": 0
                                                          },
                                                          {
                                                            "type": "object",
                                                            "additionalProperties": false,
                                                            "properties": {
                                                              "top": {
                                                                "type": "number",
                                                                "minimum": 0
                                                              },
                                                              "right": {
                                                                "type": "number",
                                                                "minimum": 0
                                                              },
                                                              "bottom": {
                                                                "type": "number",
                                                                "minimum": 0
                                                              },
                                                              "left": {
                                                                "type": "number",
                                                                "minimum": 0
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "type": "boolean",
                                            "nullable": true
                                          }
                                        ],
                                        "components": {
                                          "schemas": {
                                            "string": {
                                              "description": "File path of the PNG file, relative to your media directory. Accepts absolute paths. If not specified, the file name is the ID of the step.",
                                              "type": "string",
                                              "pattern": "([A-Za-z0-9_-]*\\.(png|PNG)$|\\$[A-Za-z0-9_]+)",
                                              "transform": [
                                                "trim"
                                              ]
                                            },
                                            "object": {
                                              "type": "object",
                                              "properties": {
                                                "path": {
                                                  "type": "string",
                                                  "description": "File path of the PNG file, relative to `directory`. If not specified, the file name is the ID of the step.",
                                                  "pattern": "([A-Za-z0-9_-]*\\.(png|PNG)$|\\$[A-Za-z0-9_]+)",
                                                  "transform": [
                                                    "trim"
                                                  ]
                                                },
                                                "directory": {
                                                  "type": "string",
                                                  "description": "Directory of the PNG file. If the directory doesn't exist, creates the directory.",
                                                  "transform": [
                                                    "trim"
                                                  ]
                                                },
                                                "maxVariation": {
                                                  "type": "number",
                                                  "description": "Allowed variation in percentage of pixels between the new screenshot and the exisitng screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn't exist at `path`, this value is ignored.",
                                                  "default": 0.05,
                                                  "minimum": 0,
                                                  "maximum": 1
                                                },
                                                "overwrite": {
                                                  "type": "string",
                                                  "description": "If `true`, overwrites the existing screenshot at `path` if it exists.\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.",
                                                  "enum": [
                                                    "true",
                                                    "false",
                                                    "aboveVariation"
                                                  ],
                                                  "default": "aboveVariation"
                                                },
                                                "crop": {
                                                  "anyOf": [
                                                    {
                                                      "title": "Crop by element",
                                                      "type": "string",
                                                      "description": "Display text or selector of the element to screenshot."
                                                    },
                                                    {
                                                      "title": "Crop by element (detailed)",
                                                      "type": "object",
                                                      "description": "Crop the screenshot to a specific element.",
                                                      "additionalProperties": false,
                                                      "anyOf": [
                                                        {
                                                          "required": [
                                                            "selector"
                                                          ]
                                                        },
                                                        {
                                                          "required": [
                                                            "elementText"
                                                          ]
                                                        }
                                                      ],
                                                      "properties": {
                                                        "elementText": {
                                                          "type": "string",
                                                          "description": "Display text of the element to screenshot."
                                                        },
                                                        "selector": {
                                                          "type": "string",
                                                          "description": "Selector of the element to screenshot."
                                                        },
                                                        "padding": {
                                                          "anyOf": [
                                                            {
                                                              "type": "number",
                                                              "description": "Padding in pixels to add to the bounds of the element.",
                                                              "minimum": 0
                                                            },
                                                            {
                                                              "type": "object",
                                                              "additionalProperties": false,
                                                              "properties": {
                                                                "top": {
                                                                  "type": "number",
                                                                  "minimum": 0
                                                                },
                                                                "right": {
                                                                  "type": "number",
                                                                  "minimum": 0
                                                                },
                                                                "bottom": {
                                                                  "type": "number",
                                                                  "minimum": 0
                                                                },
                                                                "left": {
                                                                  "type": "number",
                                                                  "minimum": 0
                                                                }
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            },
                                            "crop_element": {
                                              "title": "Crop by element (detailed)",
                                              "type": "object",
                                              "description": "Crop the screenshot to a specific element.",
                                              "additionalProperties": false,
                                              "anyOf": [
                                                {
                                                  "required": [
                                                    "selector"
                                                  ]
                                                },
                                                {
                                                  "required": [
                                                    "elementText"
                                                  ]
                                                }
                                              ],
                                              "properties": {
                                                "elementText": {
                                                  "type": "string",
                                                  "description": "Display text of the element to screenshot."
                                                },
                                                "selector": {
                                                  "type": "string",
                                                  "description": "Selector of the element to screenshot."
                                                },
                                                "padding": {
                                                  "anyOf": [
                                                    {
                                                      "type": "number",
                                                      "description": "Padding in pixels to add to the bounds of the element.",
                                                      "minimum": 0
                                                    },
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": false,
                                                      "properties": {
                                                        "top": {
                                                          "type": "number",
                                                          "minimum": 0
                                                        },
                                                        "right": {
                                                          "type": "number",
                                                          "minimum": 0
                                                        },
                                                        "bottom": {
                                                          "type": "number",
                                                          "minimum": 0
                                                        },
                                                        "left": {
                                                          "type": "number",
                                                          "minimum": 0
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            },
                                            "padding": {
                                              "type": "object",
                                              "additionalProperties": false,
                                              "properties": {
                                                "top": {
                                                  "type": "number",
                                                  "minimum": 0
                                                },
                                                "right": {
                                                  "type": "number",
                                                  "minimum": 0
                                                },
                                                "bottom": {
                                                  "type": "number",
                                                  "minimum": 0
                                                },
                                                "left": {
                                                  "type": "number",
                                                  "minimum": 0
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "examples": [
                                          true,
                                          "image.png",
                                          "static/images/image.png",
                                          "/User/manny/projects/doc-detective/static/images/image.png",
                                          {
                                            "path": "image.png",
                                            "directory": "static/images",
                                            "maxVariation": 0.1,
                                            "overwrite": "aboveVariation",
                                            "crop": "#elementToScreenshot"
                                          },
                                          {
                                            "path": "image.png",
                                            "directory": "static/images",
                                            "maxVariation": 0.1,
                                            "overwrite": "aboveVariation"
                                          },
                                          {
                                            "path": "image.png",
                                            "directory": "static/images",
                                            "maxVariation": 0.1,
                                            "overwrite": "aboveVariation",
                                            "crop": {
                                              "selector": "#elementToScreenshot",
                                              "elementText": "Element text",
                                              "padding": {
                                                "top": 0,
                                                "right": 0,
                                                "bottom": 0,
                                                "left": 0
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "dynamicDefaults": {
                                      "stepId": "uuid"
                                    },
                                    "properties": {
                                      "stepId": {
                                        "type": "string",
                                        "description": "ID of the step."
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "Description of the step."
                                      },
                                      "outputs": {
                                        "type": "object",
                                        "description": "Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      },
                                      "variables": {
                                        "type": "object",
                                        "description": "Environment variables to set from user-defined expressions.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "record"
                                    ],
                                    "properties": {
                                      "record": {
                                        "$schema": "http://json-schema.org/draft-07/schema#",
                                        "title": "record",
                                        "description": "Start recording the current browser viewport. Must be followed by a `stopRecord` step. Only runs in Chrome browsers when they are visible. Supported extensions: [ '.mp4', '.webm', '.gif' ]",
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.",
                                            "pattern": "([A-Za-z0-9_-]*\\.(mp4|webm|gif)$|\\$[A-Za-z0-9_]+)",
                                            "transform": [
                                              "trim"
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "path": {
                                                "type": "string",
                                                "description": "File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.",
                                                "pattern": "([A-Za-z0-9_-]*\\.(mp4|webm|gif)$|\\$[A-Za-z0-9_]+)",
                                                "transform": [
                                                  "trim"
                                                ]
                                              },
                                              "directory": {
                                                "type": "string",
                                                "description": "Directory of the file. If the directory doesn't exist, creates the directory.",
                                                "transform": [
                                                  "trim"
                                                ]
                                              },
                                              "overwrite": {
                                                "type": "string",
                                                "description": "If `true`, overwrites the existing screenshot at `path` if it exists.\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.",
                                                "enum": [
                                                  "true",
                                                  "false"
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "type": "boolean",
                                            "nullable": true
                                          }
                                        ],
                                        "components": {
                                          "schemas": {
                                            "string": {
                                              "type": "string",
                                              "description": "File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.",
                                              "pattern": "([A-Za-z0-9_-]*\\.(mp4|webm|gif)$|\\$[A-Za-z0-9_]+)",
                                              "transform": [
                                                "trim"
                                              ]
                                            },
                                            "object": {
                                              "type": "object",
                                              "properties": {
                                                "path": {
                                                  "type": "string",
                                                  "description": "File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.",
                                                  "pattern": "([A-Za-z0-9_-]*\\.(mp4|webm|gif)$|\\$[A-Za-z0-9_]+)",
                                                  "transform": [
                                                    "trim"
                                                  ]
                                                },
                                                "directory": {
                                                  "type": "string",
                                                  "description": "Directory of the file. If the directory doesn't exist, creates the directory.",
                                                  "transform": [
                                                    "trim"
                                                  ]
                                                },
                                                "overwrite": {
                                                  "type": "string",
                                                  "description": "If `true`, overwrites the existing screenshot at `path` if it exists.\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.",
                                                  "enum": [
                                                    "true",
                                                    "false"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "examples": [
                                          true,
                                          "results.mp4",
                                          {
                                            "path": "results.mp4",
                                            "directory": "static/media",
                                            "overwrite": "true"
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "dynamicDefaults": {
                                      "stepId": "uuid"
                                    },
                                    "properties": {
                                      "stepId": {
                                        "type": "string",
                                        "description": "ID of the step."
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "Description of the step."
                                      },
                                      "outputs": {
                                        "type": "object",
                                        "description": "Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      },
                                      "variables": {
                                        "type": "object",
                                        "description": "Environment variables to set from user-defined expressions.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "stopRecord"
                                    ],
                                    "properties": {
                                      "stopRecord": {
                                        "$schema": "http://json-schema.org/draft-07/schema#",
                                        "title": "stopRecord",
                                        "description": "Stop the current recording.",
                                        "anyOf": [
                                          {
                                            "type": "boolean",
                                            "nullable": true
                                          }
                                        ],
                                        "examples": [
                                          true
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "dynamicDefaults": {
                                      "stepId": "uuid"
                                    },
                                    "properties": {
                                      "stepId": {
                                        "type": "string",
                                        "description": "ID of the step."
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "Description of the step."
                                      },
                                      "outputs": {
                                        "type": "object",
                                        "description": "Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      },
                                      "variables": {
                                        "type": "object",
                                        "description": "Environment variables to set from user-defined expressions.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "required": [
                                      "loadVariables"
                                    ],
                                    "properties": {
                                      "loadVariables": {
                                        "$schema": "http://json-schema.org/draft-07/schema#",
                                        "title": "loadVariables",
                                        "type": "string",
                                        "description": "Load environment variables from the specified `.env` file.",
                                        "examples": [
                                          ".env"
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "dynamicDefaults": {
                                      "stepId": "uuid"
                                    },
                                    "properties": {
                                      "stepId": {
                                        "type": "string",
                                        "description": "ID of the step."
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "Description of the step."
                                      },
                                      "outputs": {
                                        "type": "object",
                                        "description": "Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      },
                                      "variables": {
                                        "type": "object",
                                        "description": "Environment variables to set from user-defined expressions.",
                                        "default": {},
                                        "patternProperties": {
                                          "^[A-Za-z0-9_]+$": {
                                            "type": "string",
                                            "description": "Runtime expression for a user-defined output value."
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "required": [
                                      "wait"
                                    ],
                                    "properties": {
                                      "wait": {
                                        "$schema": "http://json-schema.org/draft-07/schema#",
                                        "title": "wait",
                                        "description": "Pause (in milliseconds) before performing the next action.",
                                        "default": 5000,
                                        "anyOf": [
                                          {
                                            "type": "number",
                                            "nullable": true
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "(\\$[A-Za-z0-9_]+)",
                                            "transform": [
                                              "trim"
                                            ]
                                          },
                                          {
                                            "type": "boolean"
                                          }
                                        ],
                                        "components": {
                                          "schemas": {
                                            "string": {
                                              "type": "string",
                                              "pattern": "(\\$[A-Za-z0-9_]+)",
                                              "transform": [
                                                "trim"
                                              ]
                                            }
                                          }
                                        },
                                        "examples": [
                                          5000,
                                          "$WAIT_DURATION",
                                          true
                                        ]
                                      }
                                    }
                                  }
                                ]
                              }
                            ],
                            "examples": [
                              {
                                "stepId": "uuid",
                                "description": "Description of the step.",
                                "checkLink": "https://www.google.com",
                                "outputs": {
                                  "outputKey": "outputValue"
                                },
                                "variables": {
                                  "variableKey": "variableValue"
                                }
                              },
                              {
                                "checkLink": "https://www.google.com"
                              },
                              {
                                "stepId": "path-only",
                                "checkLink": "/search"
                              },
                              {
                                "stepId": "status-code",
                                "checkLink": {
                                  "url": "https://www.google.com",
                                  "statusCodes": [
                                    200
                                  ]
                                }
                              },
                              {
                                "goTo": {
                                  "url": "https://www.google.com"
                                }
                              },
                              {
                                "goTo": "https://www.google.com"
                              },
                              {
                                "wait": 5000
                              },
                              {
                                "runCode": {
                                  "language": "python",
                                  "code": "print('Hello from Python')",
                                  "workingDirectory": ".",
                                  "exitCodes": [
                                    0
                                  ],
                                  "stdio": "Hello from Python!",
                                  "path": "python-output.txt",
                                  "directory": "output",
                                  "maxVariation": 0.1,
                                  "overwrite": "aboveVariation"
                                }
                              },
                              {
                                "stopRecord": true
                              },
                              {
                                "screenshot": true
                              },
                              {
                                "screenshot": "image.png"
                              },
                              {
                                "screenshot": "static/images/image.png"
                              },
                              {
                                "screenshot": "/User/manny/projects/doc-detective/static/images/image.png"
                              },
                              {
                                "screenshot": {
                                  "path": "image.png",
                                  "directory": "static/images",
                                  "maxVariation": 0.1,
                                  "overwrite": "aboveVariation",
                                  "crop": "#elementToScreenshot"
                                }
                              },
                              {
                                "screenshot": {
                                  "path": "image.png",
                                  "directory": "static/images",
                                  "maxVariation": 0.1,
                                  "overwrite": "aboveVariation"
                                }
                              },
                              {
                                "screenshot": {
                                  "path": "image.png",
                                  "directory": "static/images",
                                  "maxVariation": 0.1,
                                  "overwrite": "aboveVariation",
                                  "crop": {
                                    "selector": "#elementToScreenshot",
                                    "elementText": "Element text",
                                    "padding": {
                                      "top": 0,
                                      "right": 0,
                                      "bottom": 0,
                                      "left": 0
                                    }
                                  }
                                }
                              },
                              {
                                "record": true
                              },
                              {
                                "record": "video.mp4"
                              },
                              {
                                "record": "static/media/video.mp4"
                              },
                              {
                                "record": "/User/manny/projects/doc-detective/static/media/video.mp4"
                              },
                              {
                                "record": {
                                  "path": "video.mp4",
                                  "directory": "static/media",
                                  "overwrite": true
                                }
                              },
                              {
                                "loadVariables": "variables.env"
                              },
                              {
                                "find": "Find me!"
                              },
                              {
                                "find": {
                                  "selector": "[title=Search]"
                                }
                              },
                              {
                                "find": {
                                  "selector": "[title=Search]",
                                  "timeout": 10000,
                                  "elementText": "Search",
                                  "moveTo": true,
                                  "click": true,
                                  "type": "shorthair cat"
                                }
                              },
                              {
                                "find": {
                                  "selector": "[title=Search]",
                                  "click": {
                                    "button": "right"
                                  }
                                }
                              },
                              {
                                "find": {
                                  "selector": "[title=Search]",
                                  "timeout": 10000,
                                  "elementText": "Search",
                                  "moveTo": true,
                                  "click": true,
                                  "type": {
                                    "keys": [
                                      "shorthair cat"
                                    ],
                                    "inputDelay": 100
                                  }
                                }
                              },
                              {
                                "click": true
                              },
                              {
                                "click": "right"
                              },
                              {
                                "click": {
                                  "button": "left",
                                  "elementText": "Element text"
                                }
                              },
                              {
                                "click": {
                                  "selector": "#elementToScreenshot",
                                  "elementText": "Element text",
                                  "button": "middle"
                                }
                              },
                              {
                                "httpRequest": "https://reqres.in/api/users"
                              },
                              {
                                "httpRequest": {
                                  "url": "https://reqres.in/api/users"
                                }
                              },
                              {
                                "httpRequest": {
                                  "url": "https://reqres.in/api/users/2",
                                  "method": "put",
                                  "request": {
                                    "body": {
                                      "name": "morpheus",
                                      "job": "zion resident"
                                    }
                                  }
                                }
                              },
                              {
                                "httpRequest": {
                                  "url": "https://reqres.in/api/users",
                                  "method": "post",
                                  "request": {
                                    "body": {
                                      "name": "morpheus",
                                      "job": "leader"
                                    }
                                  },
                                  "response": {
                                    "body": {
                                      "name": "morpheus",
                                      "job": "leader"
                                    }
                                  },
                                  "statusCodes": [
                                    200,
                                    201
                                  ]
                                }
                              },
                              {
                                "httpRequest": {
                                  "url": "https://www.api-server.com",
                                  "method": "post",
                                  "timeout": 30000,
                                  "request": {
                                    "body": {
                                      "field": "value"
                                    },
                                    "headers": {
                                      "header": "value"
                                    },
                                    "params": {
                                      "param": "value"
                                    }
                                  },
                                  "response": {
                                    "body": {
                                      "field": "value"
                                    },
                                    "headers": {
                                      "header": "value"
                                    }
                                  },
                                  "statusCodes": [
                                    200
                                  ]
                                }
                              },
                              {
                                "httpRequest": {
                                  "url": "https://reqres.in/api/users",
                                  "method": "post",
                                  "request": {
                                    "body": {
                                      "name": "morpheus",
                                      "job": "leader"
                                    }
                                  },
                                  "response": {
                                    "body": {
                                      "name": "morpheus",
                                      "job": "leader"
                                    }
                                  },
                                  "statusCodes": [
                                    200,
                                    201
                                  ],
                                  "path": "response.json",
                                  "directory": "media",
                                  "maxVariation": 0.05,
                                  "overwrite": "aboveVariation"
                                }
                              },
                              {
                                "httpRequest": {
                                  "openApi": "getUserById"
                                }
                              },
                              {
                                "httpRequest": {
                                  "openApi": {
                                    "descriptionName": "Reqres",
                                    "operationId": "getUserById"
                                  },
                                  "request": {
                                    "params": {
                                      "id": 123
                                    }
                                  }
                                }
                              },
                              {
                                "httpRequest": {
                                  "openApi": {
                                    "descriptionPath": "https://api.example.com/openapi.json",
                                    "operationId": "getUserById"
                                  },
                                  "request": {
                                    "params": {
                                      "id": 123
                                    }
                                  }
                                }
                              },
                              {
                                "httpRequest": {
                                  "openApi": {
                                    "descriptionPath": "https://api.example.com/openapi.json",
                                    "operationId": "createUser",
                                    "useExample": "both"
                                  }
                                }
                              },
                              {
                                "httpRequest": {
                                  "openApi": {
                                    "descriptionPath": "https://api.example.com/openapi.json",
                                    "operationId": "updateUser",
                                    "useExample": "request",
                                    "exampleKey": "acme"
                                  }
                                }
                              },
                              {
                                "httpRequest": {
                                  "openApi": {
                                    "descriptionPath": "https://api.example.com/openapi.json",
                                    "operationId": "updateUser",
                                    "useExample": "request",
                                    "exampleKey": "acme",
                                    "headers": {
                                      "Authorization": "Bearer $TOKEN"
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "dynamicDefaults": {
                        "testId": "uuid"
                      },
                      "required": [
                        "steps"
                      ],
                      "additionalProperties": false,
                      "examples": [
                        {
                          "steps": [
                            {
                              "checkLink": "https://www.duckduckgo.com"
                            }
                          ]
                        },
                        {
                          "steps": [
                            {
                              "goTo": {
                                "url": "https://www.duckduckgo.com"
                              }
                            },
                            {
                              "find": {
                                "selector": "[title=Search]",
                                "click": true,
                                "type": {
                                  "keys": [
                                    "shorthair cats",
                                    "$ENTER$"
                                  ]
                                }
                              }
                            }
                          ]
                        },
                        {
                          "testId": "Do all the things! - Test",
                          "description": "This test includes every property across all actions.",
                          "before": "setup.json",
                          "after": "cleanup.json",
                          "runOn": [
                            {
                              "platforms": [
                                "linux"
                              ],
                              "browsers": {
                                "name": "firefox",
                                "executablePath": "/usr/bin/firefox",
                                "dimensions": {},
                                "viewport": {}
                              }
                            }
                          ],
                          "steps": [
                            {
                              "loadVariables": ".env"
                            },
                            {
                              "runShell": {
                                "command": "echo",
                                "args": [
                                  "$USER"
                                ],
                                "maxVariation": 0,
                                "overwrite": "aboveVariation"
                              },
                              "variables": {}
                            },
                            {
                              "checkLink": {
                                "url": "https://www.duckduckgo.com"
                              }
                            },
                            {
                              "httpRequest": {
                                "method": "post",
                                "url": "https://reqres.in/api/users",
                                "request": {
                                  "body": {
                                    "name": "morpheus",
                                    "job": "leader"
                                  }
                                },
                                "response": {
                                  "body": {
                                    "name": "morpheus",
                                    "job": "leader"
                                  }
                                },
                                "statusCodes": [
                                  200,
                                  201
                                ],
                                "maxVariation": 0,
                                "overwrite": "aboveVariation"
                              },
                              "variables": {}
                            },
                            {
                              "goTo": {
                                "url": "https://www.duckduckgo.com"
                              }
                            },
                            {
                              "find": {
                                "selector": "[title=Search]",
                                "elementText": "Search",
                                "timeout": 10000,
                                "moveTo": true,
                                "click": true,
                                "type": {
                                  "keys": [
                                    "shorthair cat"
                                  ]
                                }
                              },
                              "variables": {}
                            },
                            {
                              "type": {
                                "keys": [
                                  "$ENTER$"
                                ]
                              }
                            },
                            {
                              "screenshot": {
                                "maxVariation": 0,
                                "overwrite": "aboveVariation"
                              }
                            }
                          ],
                          "detectSteps": true
                        },
                        {
                          "testId": "c61b02e8-7485-44d3-8065-f873673379c6",
                          "openApi": [
                            {
                              "descriptionPath": "https://www.acme.com/openapi.json",
                              "server": "https://api.acme.com",
                              "validateAgainstSchema": "both",
                              "useExample": "none",
                              "exampleKey": "",
                              "descriptionName": "Acme"
                            }
                          ],
                          "steps": [
                            {
                              "httpRequest": {
                                "openApi": {
                                  "operationId": "getUserById",
                                  "validateAgainstSchema": "both",
                                  "useExample": "none",
                                  "exampleKey": ""
                                },
                                "request": {
                                  "params": {
                                    "id": 123
                                  }
                                },
                                "response": {},
                                "maxVariation": 0,
                                "overwrite": "aboveVariation"
                              },
                              "variables": {}
                            }
                          ],
                          "detectSteps": true
                        }
                      ]
                    }
                  ]
                }
              }
            },
            "required": [
              "tests"
            ],
            "examples": [
              {
                "tests": [
                  {
                    "steps": [
                      {
                        "checkLink": {
                          "url": "https://www.duckduckgo.com"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "specId": "Do all the things! - Spec",
                "runOn": [
                  {
                    "platforms": [
                      "windows",
                      "mac"
                    ],
                    "browsers": {
                      "name": "firefox",
                      "executablePath": "/usr/bin/firefox",
                      "dimensions": {},
                      "viewport": {}
                    }
                  }
                ],
                "tests": [
                  {
                    "testId": "Do all the things! - Test",
                    "description": "This test includes nearly every property across all actions.",
                    "runOn": [
                      {
                        "platforms": "linux",
                        "browsers": "firefox"
                      }
                    ],
                    "steps": [
                      {
                        "loadVariables": ".env"
                      },
                      {
                        "runShell": {
                          "command": "echo",
                          "args": [
                            "$USER"
                          ],
                          "maxVariation": 0,
                          "overwrite": "aboveVariation"
                        },
                        "variables": {}
                      },
                      {
                        "checkLink": {
                          "url": "https://www.duckduckgo.com"
                        }
                      },
                      {
                        "httpRequest": {
                          "method": "post",
                          "url": "https://reqres.in/api/users",
                          "request": {
                            "body": {
                              "name": "morpheus",
                              "job": "leader"
                            }
                          },
                          "response": {
                            "body": {
                              "name": "morpheus",
                              "job": "leader"
                            }
                          },
                          "statusCodes": [
                            200,
                            201
                          ],
                          "maxVariation": 0,
                          "overwrite": "aboveVariation"
                        },
                        "variables": {}
                      },
                      {
                        "goTo": {
                          "url": "https://www.duckduckgo.com"
                        }
                      },
                      {
                        "find": {
                          "selector": "[title=Search]",
                          "elementText": "Search",
                          "timeout": 10000,
                          "moveTo": true,
                          "click": true,
                          "type": {
                            "keys": [
                              "shorthair cat"
                            ]
                          }
                        },
                        "variables": {}
                      },
                      {
                        "type": {
                          "keys": [
                            "$ENTER$"
                          ]
                        }
                      },
                      {
                        "screenshot": {
                          "maxVariation": 0,
                          "overwrite": "aboveVariation"
                        }
                      }
                    ],
                    "detectSteps": true
                  }
                ]
              },
              {
                "specId": "Make a request from an OpenAPI definition",
                "openApi": [
                  {
                    "descriptionPath": "https://www.acme.com/openapi.json",
                    "server": "https://api.acme.com",
                    "descriptionName": "Acme"
                  }
                ],
                "tests": [
                  {
                    "steps": [
                      {
                        "httpRequest": {
                          "openApi": {
                            "operationId": "getUserById",
                            "validateAgainstSchema": "both",
                            "useExample": "none",
                            "exampleKey": ""
                          },
                          "request": {
                            "params": {
                              "id": 123
                            }
                          },
                          "response": {},
                          "maxVariation": 0,
                          "overwrite": "aboveVariation"
                        },
                        "variables": {}
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    }
  },
  "required": [
    "specs"
  ],
  "examples": [
    {
      "specs": [
        {
          "tests": [
            {
              "steps": [
                {
                  "checkLink": {
                    "url": "https://www.duckduckgo.com"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "specs": [
        {
          "specId": "Do all the things! - Spec",
          "runOn": [
            {
              "platforms": [
                "windows",
                "mac"
              ],
              "browsers": {
                "name": "firefox",
                "executablePath": "/usr/bin/firefox",
                "dimensions": {},
                "viewport": {}
              }
            }
          ],
          "tests": [
            {
              "testId": "Do all the things! - Test",
              "description": "This test includes nearly every property across all actions.",
              "runOn": [
                {
                  "platforms": "linux",
                  "browsers": "firefox"
                }
              ],
              "steps": [
                {
                  "loadVariables": ".env"
                },
                {
                  "runShell": {
                    "command": "echo",
                    "args": [
                      "$USER"
                    ],
                    "maxVariation": 0,
                    "overwrite": "aboveVariation"
                  },
                  "variables": {}
                },
                {
                  "checkLink": {
                    "url": "https://www.duckduckgo.com"
                  }
                },
                {
                  "httpRequest": {
                    "method": "post",
                    "url": "https://reqres.in/api/users",
                    "request": {
                      "body": {
                        "name": "morpheus",
                        "job": "leader"
                      }
                    },
                    "response": {
                      "body": {
                        "name": "morpheus",
                        "job": "leader"
                      }
                    },
                    "statusCodes": [
                      200,
                      201
                    ],
                    "maxVariation": 0,
                    "overwrite": "aboveVariation"
                  },
                  "variables": {}
                },
                {
                  "goTo": {
                    "url": "https://www.duckduckgo.com"
                  }
                },
                {
                  "find": {
                    "selector": "[title=Search]",
                    "elementText": "Search",
                    "timeout": 10000,
                    "moveTo": true,
                    "click": true,
                    "type": {
                      "keys": [
                        "shorthair cat"
                      ]
                    }
                  },
                  "variables": {}
                },
                {
                  "type": {
                    "keys": [
                      "$ENTER$"
                    ]
                  }
                },
                {
                  "screenshot": {
                    "maxVariation": 0,
                    "overwrite": "aboveVariation"
                  }
                }
              ],
              "detectSteps": true
            }
          ]
        }
      ]
    },
    {
      "specs": [
        {
          "specId": "Make a request from an OpenAPI definition",
          "openApi": [
            {
              "descriptionPath": "https://www.acme.com/openapi.json",
              "server": "https://api.acme.com",
              "descriptionName": "Acme"
            }
          ],
          "tests": [
            {
              "steps": [
                {
                  "httpRequest": {
                    "openApi": {
                      "operationId": "getUserById",
                      "validateAgainstSchema": "both",
                      "useExample": "none",
                      "exampleKey": ""
                    },
                    "request": {
                      "params": {
                        "id": 123
                      }
                    },
                    "response": {},
                    "maxVariation": 0,
                    "overwrite": "aboveVariation"
                  },
                  "variables": {}
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}