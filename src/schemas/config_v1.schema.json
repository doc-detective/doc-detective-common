{
  "title": "config",
  "type": "object",
  "properties": {
    "env": {
      "type": "string",
      "description": "Path to `.env` file to load before running tests.",
      "default": ""
    },
    "input": {
      "type": "string",
      "description": "Path to the file or directory that contains tests. If set to a directory, parses file formats specified in `testExtensions` for in-line or JSON-format test definitions.",
      "default": "./sample/"
    },
    "output": {
      "type": "string",
      "description": "Output path for the test results report.",
      "default": "./sample/results.json"
    },
    "setup": {
      "type": "string",
      "description": "Path to tests that set up the testing environment, such as fetching credentials. `setup` tests run before `input` tests.",
      "default": ""
    },
    "cleanup": {
      "type": "string",
      "description": "Path to tests that clean up the testing environment, such as removing generated files. `cleanup` tests run after `input` tests.",
      "default": ""
    },
    "recursive": {
      "type": "boolean",
      "description": "If `true`, recursively searches `input`, `setup`, and `cleanup` directories for test definitions.",
      "default": true
    },
    "coverageOutput": {
      "type": "string",
      "description": "Output path for the test coverage report.",
      "default": "./sample/coverage.json"
    },
    "testSuggestions": {
      "type": "object",
      "properties": {
        "reportOutput": {
          "type": "string",
          "description": "Output path for the test suggestions report.",
          "default": "./sample/suggestions.json"
        }
      },
      "required": [
        "reportOutput"
      ]
    },
    "testExtensions": {
      "description": "File formats to use check for test definitions.",
      "type": "array",
      "items": [
        {
          "type": "string",
          "pattern": "^\\.[a-zA-Z0-9._-]*$"
        }
      ],
      "minItems": 1,
      "additionalItems": false
    },
    "mediaDirectory": {
      "type": "string",
      "description": "Path to a directory to store captured screenshots and recordings.",
      "default": "./sample/"
    },
    "downloadDirectory": {
      "type": "string",
      "description": "Path to a directory to store downloaded files.",
      "default": "./sample/"
    },
    "saveFailedTestRecordings": {
      "type": "boolean",
      "description": "If `true`, saves recordings of failed tests.",
      "default": true
    },
    "failedTestDirectory": {
      "type": "string",
      "description": "Path to a directory to store recordings of failed tests.",
      "default": "./sample/failedTests/"
    },
    "fileTypes": {
      "description": "Configuration details for file types.",
      "type": "array",
      "items": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "extensions": {
                "description": "File types to configure.",
                "type": "array",
                "items": [
                  {
                    "type": "string",
                    "pattern": "^\\.[a-zA-Z0-9._-]*$"
                  }
                ],
                "default": [
                  ".md"
                ]
              },
              "testStartStatementOpen": {
                "type": "string",
                "description": "Beginning of a test start statement.",
                "default": "[comment]: # (test start"
              },
              "testStartStatementClose": {
                "type": "string",
                "description": "End of a test start statement.",
                "default": ")"
              },
              "testIgnoreStatement": {
                "type": "string",
                "description": "Test ignore statement.",
                "default": "[comment]: # (test ignore)"
              },
              "testEndStatement": {
                "type": "string",
                "description": "Test end statement.",
                "default": "[comment]: # (test end)"
              },
              "actionStatementOpen": {
                "type": "string",
                "description": "Beginning of a action statement.",
                "default": "[comment]: # (action"
              },
              "actionStatementClose": {
                "type": "string",
                "description": "End of an action statement",
                "default": ")"
              },
              "markup": {
                "description": "Markup for content to identify during test coverage and suggestion analysis.",
                "type": "object",
                "additionalItems": true,
                "properties": {
                  "onscreenText": {
                    "$ref": "#/definitions/markupInstance"
                  },
                  "emphasis": {
                    "$ref": "#/definitions/markupInstance"
                  },
                  "image": {
                    "$ref": "#/definitions/markupInstance"
                  },
                  "hyperlink": {
                    "$ref": "#/definitions/markupInstance"
                  },
                  "orderedList": {
                    "$ref": "#/definitions/markupInstance"
                  },
                  "unorderedList": {
                    "$ref": "#/definitions/markupInstance"
                  },
                  "codeInline": {
                    "$ref": "#/definitions/markupInstance"
                  },
                  "codeBlock": {
                    "$ref": "#/definitions/markupInstance"
                  },
                  "interaction": {
                    "$ref": "#/definitions/markupInstance"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "browserOptions": {
      "type": "object",
      "properties": {
        "headless": {
          "type": "boolean",
          "description": "If `true`, runs the browser in a headless, hidden state.",
          "default": true
        },
        "path": {
          "type": "string",
          "description": "Path to the browser executable to perform tests with. If not specified, Doc Detective attempts to run a bundled Chromium browser. If the bundled Chromium fails to start, Doc Detective attempts to use default install paths for Chromium, Chrome, and Firefox.",
          "default": ""
        },
        "height": {
          "type": "integer",
          "description": "Height of the browser viewport.",
          "default": 800
        },
        "width": {
          "type": "integer",
          "description": "Width of the browser viewport.",
          "default": 1200
        }
      }
    },
    "analytics": {
      "description": "Analytics configuration.",
      "type": "object",
      "properties": {
        "send": {
          "type": "boolean",
          "description": "If `true`, sends analytics information to Doc Detective maintainers and servers specified in `customServers`.",
          "default": false
        },
        "userId": {
          "type": "string",
          "description": "Identifier for the user, group, or organization running Doc Detective.",
          "default": ""
        },
        "detailLevel": {
          "type": "string",
          "description": "Amount of detail to provide in analytics reports.",
          "enum": [
            "action-detailed",
            "action-simple",
            "test",
            "run"
          ],
          "default": "action-detailed"
        },
        "customServers": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Display name of an analytics server.",
                "default": ""
              },
              "url": {
                "type": "string",
                "description": "URL of an analytics server."
              },
              "method": {
                "type": "string",
                "description": "Method of the HTTP request.",
                "default": "get",
                "enum": [
                  "get",
                  "post",
                  "patch",
                  "delete"
                ]
              },
              "params": {
                "description": "URL parameters to include in the HTTP request, in key/value format.",
                "type": "object",
                "additionalProperties": true,
                "minProperties": 1,
                "properties": {}
              },
              "headers": {
                "description": "Headers to include in the HTTP request, in key/value format.",
                "type": "object",
                "additionalProperties": true,
                "minProperties": 1,
                "properties": {}
              }
            },
            "required": [
              "url"
            ]
          },
          "default": []
        }
      }
    },
    "logLevel": {
      "type": "string",
      "description": "The level of details output to console.",
      "enum": [
        "silent",
        "error",
        "warning",
        "info",
        "debug"
      ],
      "default": "info"
    }
  },
  "definitions": {
    "markupInstance": {
      "type": "object",
      "properties": {
        "includeInCoverage": {
          "type": "boolean",
          "description": "If `true`, includes this markup in test coverage analysis.",
          "default": true
        },
        "includeInSuggestions": {
          "type": "boolean",
          "description": "If `true`, includes this markup in suggestion analysis.",
          "default": true
        },
        "regex": {
          "description": "JavaScript-style regex to identify the markup.",
          "type": "array",
          "items": [
            {
              "type": "string"
            }
          ]
        }
      },
      "required": [
        "includeInCoverage",
        "includeInSuggestions",
        "regex"
      ]
    }
  },
  "examples": [
    {
      "env": "",
      "input": ".",
      "output": "./results.json",
      "setup": "",
      "cleanup": "",
      "recursive": true,
      "coverageOutput": "./coverage.json",
      "testSuggestions": {
        "reportOutput": "./suggestions.json"
      },
      "testExtensions": [
        ".md",
        ".mdx",
        ".html",
        ".htm",
        ".xml",
        ".json"
      ],
      "mediaDirectory": ".",
      "downloadDirectory": ".",
      "saveFailedTestRecordings": true,
      "failedTestDirectory": "./failedTests",
      "fileTypes": [
        {
          "extensions": [
            ".md",
            ".mdx"
          ],
          "testStartStatementOpen": "[comment]: # (test start",
          "testStartStatementClose": ")",
          "testIgnoreStatement": "[comment]: # (test ignore)",
          "testEndStatement": "[comment]: # (test end)",
          "actionStatementOpen": "[comment]: # (action",
          "actionStatementClose": ")",
          "markup": {
            "onscreenText": {
              "includeInCoverage": true,
              "includeInSuggestions": true,
              "regex": [
                "\\*\\*.+?\\*\\*"
              ]
            },
            "emphasis": {
              "includeInCoverage": true,
              "includeInSuggestions": true,
              "regex": [
                "(?<!\\*)\\*(?!\\*).+?(?<!\\*)\\*(?!\\*)"
              ]
            },
            "image": {
              "includeInCoverage": true,
              "includeInSuggestions": true,
              "regex": [
                "!\\[.+?\\]\\(.+?\\)"
              ]
            },
            "hyperlink": {
              "includeInCoverage": true,
              "includeInSuggestions": true,
              "regex": [
                "(?<!!)\\[.+?\\]\\(.+?\\)"
              ]
            },
            "orderedList": {
              "includeInCoverage": true,
              "includeInSuggestions": true,
              "regex": [
                "(?<=\n) *?[0-9][0-9]?[0-9]?.\\s*.*"
              ]
            },
            "unorderedList": {
              "includeInCoverage": true,
              "includeInSuggestions": true,
              "regex": [
                "(?<=\n) *?\\*.\\s*.*",
                "(?<=\n) *?-.\\s*.*"
              ]
            },
            "codeInline": {
              "includeInCoverage": true,
              "includeInSuggestions": true,
              "regex": [
                "(?<!`)`(?!`).+?(?<!`)`(?!`)"
              ]
            },
            "codeBlock": {
              "includeInCoverage": true,
              "includeInSuggestions": true,
              "regex": [
                "(?=(```))(\\w|\\W)*(?<=```)"
              ]
            },
            "interaction": {
              "includeInCoverage": true,
              "includeInSuggestions": true,
              "regex": [
                "[cC]lick",
                "[tT]ap",
                "[tT]ouch",
                "[sS]elect",
                "[cC]hoose",
                "[tT]oggle",
                "[eE]nable",
                "[dD]isable",
                "[tT]urn [oO][ff|n]",
                "[tT]ype",
                "[eE]nter"
              ]
            }
          }
        },
        {
          "extensions": [
            ".html",
            ".htm",
            ".xml"
          ],
          "testStartStatementOpen": "<!-- test start",
          "testStartStatementClose": "-->",
          "testIgnoreStatement": "<!-- test ignore -->",
          "testEndStatement": "<!-- test end -->",
          "actionStatementOpen": "<!-- action",
          "actionStatementClose": "-->",
          "markup": {
            "onscreenText": {
              "includeInCoverage": true,
              "includeInSuggestions": true,
              "regex": [
                "(?=(<b))(\\w|\\W)*(?<=<\/b>)"
              ]
            },
            "emphasis": {
              "includeInCoverage": true,
              "includeInSuggestions": true,
              "regex": [
                "(?=(<i))(\\w|\\W)*(?<=<\/i>)"
              ]
            },
            "image": {
              "includeInCoverage": true,
              "includeInSuggestions": true,
              "regex": [
                "(?=(<img))(\\w|\\W)*(?<=<\/img>|>)"
              ]
            },
            "hyperlink": {
              "includeInCoverage": true,
              "includeInSuggestions": true,
              "regex": [
                "(?=(<a))(\\w|\\W)*(?<=<\/a>)"
              ]
            },
            "orderedList": {
              "includeInCoverage": true,
              "includeInSuggestions": true,
              "regex": [
                "(?=(<ol))(\\w|\\W)*(?<=<\/ol>)"
              ]
            },
            "unorderedList": {
              "includeInCoverage": true,
              "includeInSuggestions": true,
              "regex": [
                "(?=(<ul))(\\w|\\W)*(?<=<\/ul>)"
              ]
            },
            "codeInline": {
              "includeInCoverage": true,
              "includeInSuggestions": true,
              "regex": [
                "(?=(<code))(\\w|\\W)*(?<=<\/code>)"
              ]
            },
            "codeBlock": {
              "includeInCoverage": true,
              "includeInSuggestions": true,
              "regex": [
                "(?=(<pre))(\\w|\\W)*(?<=<\/pre>)"
              ]
            },
            "interaction": {
              "includeInCoverage": true,
              "includeInSuggestions": true,
              "regex": [
                "[cC]lick",
                "[tT]ap",
                "[tT]ouch",
                "[sS]elect",
                "[cC]hoose",
                "[tT]oggle",
                "[eE]nable",
                "[dD]isable",
                "[tT]urn [oO][ff|n]",
                "[tT]ype",
                "[eE]nter"
              ]
            }
          }
        }
      ],
      "browserOptions": {
        "headless": "true",
        "path": "",
        "height": 800,
        "width": 1200
      },
      "analytics": {
        "send": false,
        "userId": "",
        "detailLevel": "action-detailed",
        "customServers": []
      },
      "logLevel": "info"
    },
    {
      "env": "sample/variables.env",
      "input": "sample/doc-content.md",
      "output": "sample/results.json",
      "setup": "",
      "cleanup": "",
      "recursive": true,
      "coverageOutput": "./sample/coverage.json",
      "testExtensions": [
        ".md",
        ".mdx",
        ".html",
        ".htm",
        ".xml",
        ".json"
      ],
      "mediaDirectory": "sample",
      "downloadDirectory": "./sample/",
      "saveFailedTestRecordings": true,
      "failedTestDirectory": "sample/failedTests",
      "fileTypes": [
        {
          "extensions": [
            ".md",
            ".mdx"
          ],
          "testStartStatementOpen": "[comment]: # (test start",
          "testStartStatementClose": ")",
          "testIgnoreStatement": "[comment]: # (test ignore)",
          "testEndStatement": "[comment]: # (test end)",
          "actionStatementOpen": "[comment]: # (action",
          "actionStatementClose": ")",
          "markup": {
            "onscreenText": [
              "\\*\\*.+?\\*\\*"
            ],
            "emphasis": [
              "(?<!\\*)\\*(?!\\*).+?(?<!\\*)\\*(?!\\*)"
            ],
            "image": [
              "!\\[.+?\\]\\(.+?\\)"
            ],
            "hyperlink": [
              "(?<!!)\\[.+?\\]\\(.+?\\)"
            ],
            "orderedList": [
              "(?<=\n) *?[0-9][0-9]?[0-9]?.\\s*.*"
            ],
            "unorderedList": [
              "(?<=\n) *?\\*.\\s*.*",
              "(?<=\n) *?-.\\s*.*"
            ],
            "codeInline": [
              "(?<!`)`(?!`).+?(?<!`)`(?!`)"
            ],
            "codeBlock": [
              "(?=(```))(\\w|\\W)*(?<=```)"
            ],
            "interaction": [
              "[cC]lick",
              "[tT]ap",
              "[tT]ouch",
              "[sS]elect",
              "[cC]hoose",
              "[tT]oggle",
              "[eE]nable",
              "[dD]isable",
              "[tT]urn [oO][ff|n]"
            ]
          }
        },
        {
          "extensions": [
            ".html",
            ".htm",
            ".xml"
          ],
          "testStartStatementOpen": "<!-- test start",
          "testStartStatementClose": "-->",
          "testIgnoreStatement": "<!-- test ignore -->",
          "testEndStatement": "<!-- test end -->",
          "actionStatementOpen": "<!-- action",
          "actionStatementClose": "-->",
          "markup": {
            "onscreenText": [
              "(?=(<b))(\\w|\\W)*(?<=<\/b>)"
            ],
            "emphasis": [
              "(?=(<i))(\\w|\\W)*(?<=<\/i>)"
            ],
            "image": [
              "(?=(<img))(\\w|\\W)*(?<=<\/img>|>)"
            ],
            "hyperlink": [
              "(?=(<a))(\\w|\\W)*(?<=<\/a>)"
            ],
            "orderedList": [
              "(?=(<ol))(\\w|\\W)*(?<=<\/ol>)"
            ],
            "unorderedList": [
              "(?=(<ul))(\\w|\\W)*(?<=<\/ul>)"
            ],
            "codeInline": [
              "(?=(<code))(\\w|\\W)*(?<=<\/code>)"
            ],
            "codeBlock": [
              "(?=(<pre))(\\w|\\W)*(?<=<\/pre>)"
            ],
            "interaction": [
              "[cC]lick",
              "[tT]ap",
              "[tT]ouch",
              "[sS]elect",
              "[cC]hoose",
              "[tT]oggle",
              "[eE]nable",
              "[dD]isable",
              "[tT]urn [oO][ff|n]"
            ]
          }
        }
      ],
      "browserOptions": {
        "headless": "true",
        "path": "",
        "height": 800,
        "width": 1200
      },
      "analytics": {
        "send": false,
        "userId": "",
        "detailLevel": "action-detailed",
        "customServers": []
      },
      "logLevel": "info"
    }
  ]
}